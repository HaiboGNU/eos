//------------------------------------------------------------------------------
// author: Lukasz Janyst <ljanyst@cern.ch>
// desc:   Class representing the file metadata
//------------------------------------------------------------------------------

#ifndef EOS_FILE_MD_HH
#define EOS_FILE_MD_HH

#include <stdint.h>
#include <cstring>
#include <string>
#include <vector>
#include "persistency/Buffer.hh"
#include "ContainerMD.hh"

namespace eos
{
  //----------------------------------------------------------------------------
  //! Class holding the metadata information concerning a single file
  //----------------------------------------------------------------------------
  class FileMD
  {
    public:
      //------------------------------------------------------------------------
      // Type definitions
      //------------------------------------------------------------------------
      typedef uint64_t id_t;
      typedef uint16_t location_t;

      //------------------------------------------------------------------------
      //! Constructor
      //------------------------------------------------------------------------
      FileMD( id_t id );

      //------------------------------------------------------------------------
      //! Get file id
      //------------------------------------------------------------------------
      id_t getId() const
      {
        return pId;
      }

      //------------------------------------------------------------------------
      //! Get creation time
      //------------------------------------------------------------------------
      uint64_t getCTime() const
      {
        return pCTime;
      }

      //------------------------------------------------------------------------
      //! Get size
      //------------------------------------------------------------------------
      uint64_t getSize() const
      {
        return pSize;
      }

      //------------------------------------------------------------------------
      //! Set size
      //------------------------------------------------------------------------
      void setSize( uint64_t size )
      {
        pSize = size;
      }

      //------------------------------------------------------------------------
      //! Get tag
      //------------------------------------------------------------------------
      ContainerMD::id_t getContainerId() const
      {
        return pContainerId;
      }

      //------------------------------------------------------------------------
      //! Set tag
      //------------------------------------------------------------------------
      void setContainerId( ContainerMD::id_t containerId )
      {
        pContainerId = containerId;
      }

      //------------------------------------------------------------------------
      //! Get checksum
      //------------------------------------------------------------------------
      uint64_t getChecksum() const
      {
        return pChecksum;
      }

      //------------------------------------------------------------------------
      //! Set checksum
      //------------------------------------------------------------------------
      void setChecksum( uint64_t checksum )
      {
        pChecksum = checksum;
      }

      //------------------------------------------------------------------------
      //! Get name
      //------------------------------------------------------------------------
      const std::string &getName() const
      {
        return pName;
      }

      //------------------------------------------------------------------------
      //! Set name
      //------------------------------------------------------------------------
      void setName( const std::string &name )
      {
        pName = name;
      }

      //------------------------------------------------------------------------
      //! Get location
      //------------------------------------------------------------------------
      const location_t &getLocation( unsigned index ) const
      {
        return pLocation[index];
      }

      //------------------------------------------------------------------------
      //! Add location
      //------------------------------------------------------------------------
      void addLocation( location_t location )
      {
        pLocation.push_back( location );
      }

      //------------------------------------------------------------------------
      //! Set location
      //------------------------------------------------------------------------
      void setLocation( unsigned index, location_t location )
      {
        pLocation[index] = location;
      }

      //------------------------------------------------------------------------
      //! Set location
      //------------------------------------------------------------------------
      void allocateLocations( unsigned number )
      {
        pLocation.resize( number, 0 );
      }

      //------------------------------------------------------------------------
      //! Get number of location
      //------------------------------------------------------------------------
      size_t getNumLocation() const
      {
        return pLocation.size();
      }

      //------------------------------------------------------------------------
      //! Serialize the object to a buffer
      //------------------------------------------------------------------------
      void serialize( Buffer &buffer );

      //------------------------------------------------------------------------
      //! Deserialize the class to a buffer
      //------------------------------------------------------------------------
      void deserialize( Buffer &buffer );

    protected:
      //------------------------------------------------------------------------
      // Data members
      //-----------------------------------------------------------------------0
      id_t                    pId;
      uint64_t                pCTime;
      uint64_t                pSize;
      ContainerMD::id_t       pContainerId;
      uint32_t                pChecksum;
      std::string             pName;
      std::vector<location_t> pLocation;
  };
}

#endif // EOS_FILE_MD_HH
