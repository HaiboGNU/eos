// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: test.proto

#ifndef PROTOBUF_test_2eproto__INCLUDED
#define PROTOBUF_test_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2003000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2003000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_message_reflection.h>
// @@protoc_insertion_point(includes)

namespace tutorial {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_test_2eproto();
void protobuf_AssignDesc_test_2eproto();
void protobuf_ShutdownFile_test_2eproto();

class Fmd;

// ===================================================================

class Fmd : public ::google::protobuf::Message {
 public:
  Fmd();
  virtual ~Fmd();
  
  Fmd(const Fmd& from);
  
  inline Fmd& operator=(const Fmd& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const Fmd& default_instance();
  
  void Swap(Fmd* other);
  
  // implements Message ----------------------------------------------
  
  Fmd* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Fmd& from);
  void MergeFrom(const Fmd& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional fixed64 fid = 1;
  inline bool has_fid() const;
  inline void clear_fid();
  static const int kFidFieldNumber = 1;
  inline ::google::protobuf::uint64 fid() const;
  inline void set_fid(::google::protobuf::uint64 value);
  
  // optional fixed64 cid = 2;
  inline bool has_cid() const;
  inline void clear_cid();
  static const int kCidFieldNumber = 2;
  inline ::google::protobuf::uint64 cid() const;
  inline void set_cid(::google::protobuf::uint64 value);
  
  // optional fixed32 fsid = 3;
  inline bool has_fsid() const;
  inline void clear_fsid();
  static const int kFsidFieldNumber = 3;
  inline ::google::protobuf::uint32 fsid() const;
  inline void set_fsid(::google::protobuf::uint32 value);
  
  // optional fixed32 ctime = 4;
  inline bool has_ctime() const;
  inline void clear_ctime();
  static const int kCtimeFieldNumber = 4;
  inline ::google::protobuf::uint32 ctime() const;
  inline void set_ctime(::google::protobuf::uint32 value);
  
  // optional fixed32 ctime_ns = 5;
  inline bool has_ctime_ns() const;
  inline void clear_ctime_ns();
  static const int kCtimeNsFieldNumber = 5;
  inline ::google::protobuf::uint32 ctime_ns() const;
  inline void set_ctime_ns(::google::protobuf::uint32 value);
  
  // optional fixed32 mtime = 6;
  inline bool has_mtime() const;
  inline void clear_mtime();
  static const int kMtimeFieldNumber = 6;
  inline ::google::protobuf::uint32 mtime() const;
  inline void set_mtime(::google::protobuf::uint32 value);
  
  // optional fixed32 mtime_ns = 7;
  inline bool has_mtime_ns() const;
  inline void clear_mtime_ns();
  static const int kMtimeNsFieldNumber = 7;
  inline ::google::protobuf::uint32 mtime_ns() const;
  inline void set_mtime_ns(::google::protobuf::uint32 value);
  
  // optional fixed32 atime = 8;
  inline bool has_atime() const;
  inline void clear_atime();
  static const int kAtimeFieldNumber = 8;
  inline ::google::protobuf::uint32 atime() const;
  inline void set_atime(::google::protobuf::uint32 value);
  
  // optional fixed32 atime_ns = 9;
  inline bool has_atime_ns() const;
  inline void clear_atime_ns();
  static const int kAtimeNsFieldNumber = 9;
  inline ::google::protobuf::uint32 atime_ns() const;
  inline void set_atime_ns(::google::protobuf::uint32 value);
  
  // optional fixed32 checktime = 10;
  inline bool has_checktime() const;
  inline void clear_checktime();
  static const int kChecktimeFieldNumber = 10;
  inline ::google::protobuf::uint32 checktime() const;
  inline void set_checktime(::google::protobuf::uint32 value);
  
  // optional fixed64 size = 11;
  inline bool has_size() const;
  inline void clear_size();
  static const int kSizeFieldNumber = 11;
  inline ::google::protobuf::uint64 size() const;
  inline void set_size(::google::protobuf::uint64 value);
  
  // optional fixed64 disksize = 12;
  inline bool has_disksize() const;
  inline void clear_disksize();
  static const int kDisksizeFieldNumber = 12;
  inline ::google::protobuf::uint64 disksize() const;
  inline void set_disksize(::google::protobuf::uint64 value);
  
  // optional fixed64 mgmsize = 13;
  inline bool has_mgmsize() const;
  inline void clear_mgmsize();
  static const int kMgmsizeFieldNumber = 13;
  inline ::google::protobuf::uint64 mgmsize() const;
  inline void set_mgmsize(::google::protobuf::uint64 value);
  
  // optional string checksum = 14;
  inline bool has_checksum() const;
  inline void clear_checksum();
  static const int kChecksumFieldNumber = 14;
  inline const ::std::string& checksum() const;
  inline void set_checksum(const ::std::string& value);
  inline void set_checksum(const char* value);
  inline void set_checksum(const char* value, size_t size);
  inline ::std::string* mutable_checksum();
  
  // optional string diskchecksum = 15;
  inline bool has_diskchecksum() const;
  inline void clear_diskchecksum();
  static const int kDiskchecksumFieldNumber = 15;
  inline const ::std::string& diskchecksum() const;
  inline void set_diskchecksum(const ::std::string& value);
  inline void set_diskchecksum(const char* value);
  inline void set_diskchecksum(const char* value, size_t size);
  inline ::std::string* mutable_diskchecksum();
  
  // optional string mgmchecksum = 16;
  inline bool has_mgmchecksum() const;
  inline void clear_mgmchecksum();
  static const int kMgmchecksumFieldNumber = 16;
  inline const ::std::string& mgmchecksum() const;
  inline void set_mgmchecksum(const ::std::string& value);
  inline void set_mgmchecksum(const char* value);
  inline void set_mgmchecksum(const char* value, size_t size);
  inline ::std::string* mutable_mgmchecksum();
  
  // optional fixed32 lid = 17;
  inline bool has_lid() const;
  inline void clear_lid();
  static const int kLidFieldNumber = 17;
  inline ::google::protobuf::uint32 lid() const;
  inline void set_lid(::google::protobuf::uint32 value);
  
  // optional fixed32 uid = 18;
  inline bool has_uid() const;
  inline void clear_uid();
  static const int kUidFieldNumber = 18;
  inline ::google::protobuf::uint32 uid() const;
  inline void set_uid(::google::protobuf::uint32 value);
  
  // optional fixed32 gid = 19;
  inline bool has_gid() const;
  inline void clear_gid();
  static const int kGidFieldNumber = 19;
  inline ::google::protobuf::uint32 gid() const;
  inline void set_gid(::google::protobuf::uint32 value);
  
  // optional sint64 filecxerror = 20;
  inline bool has_filecxerror() const;
  inline void clear_filecxerror();
  static const int kFilecxerrorFieldNumber = 20;
  inline ::google::protobuf::int64 filecxerror() const;
  inline void set_filecxerror(::google::protobuf::int64 value);
  
  // optional sint64 blockcxerror = 21;
  inline bool has_blockcxerror() const;
  inline void clear_blockcxerror();
  static const int kBlockcxerrorFieldNumber = 21;
  inline ::google::protobuf::int64 blockcxerror() const;
  inline void set_blockcxerror(::google::protobuf::int64 value);
  
  // optional sint64 layouterror = 22;
  inline bool has_layouterror() const;
  inline void clear_layouterror();
  static const int kLayouterrorFieldNumber = 22;
  inline ::google::protobuf::int64 layouterror() const;
  inline void set_layouterror(::google::protobuf::int64 value);
  
  // optional string locations = 23;
  inline bool has_locations() const;
  inline void clear_locations();
  static const int kLocationsFieldNumber = 23;
  inline const ::std::string& locations() const;
  inline void set_locations(const ::std::string& value);
  inline void set_locations(const char* value);
  inline void set_locations(const char* value, size_t size);
  inline ::std::string* mutable_locations();
  
  // @@protoc_insertion_point(class_scope:tutorial.Fmd)
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::google::protobuf::uint64 fid_;
  ::google::protobuf::uint64 cid_;
  ::google::protobuf::uint32 fsid_;
  ::google::protobuf::uint32 ctime_;
  ::google::protobuf::uint32 ctime_ns_;
  ::google::protobuf::uint32 mtime_;
  ::google::protobuf::uint32 mtime_ns_;
  ::google::protobuf::uint32 atime_;
  ::google::protobuf::uint32 atime_ns_;
  ::google::protobuf::uint32 checktime_;
  ::google::protobuf::uint64 size_;
  ::google::protobuf::uint64 disksize_;
  ::google::protobuf::uint64 mgmsize_;
  ::std::string* checksum_;
  static const ::std::string _default_checksum_;
  ::std::string* diskchecksum_;
  static const ::std::string _default_diskchecksum_;
  ::std::string* mgmchecksum_;
  static const ::std::string _default_mgmchecksum_;
  ::google::protobuf::uint32 lid_;
  ::google::protobuf::uint32 uid_;
  ::google::protobuf::uint32 gid_;
  ::google::protobuf::int64 filecxerror_;
  ::google::protobuf::int64 blockcxerror_;
  ::google::protobuf::int64 layouterror_;
  ::std::string* locations_;
  static const ::std::string _default_locations_;
  friend void  protobuf_AddDesc_test_2eproto();
  friend void protobuf_AssignDesc_test_2eproto();
  friend void protobuf_ShutdownFile_test_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(23 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static Fmd* default_instance_;
};
// ===================================================================


// ===================================================================

// Fmd

// optional fixed64 fid = 1;
inline bool Fmd::has_fid() const {
  return _has_bit(0);
}
inline void Fmd::clear_fid() {
  fid_ = GOOGLE_ULONGLONG(0);
  _clear_bit(0);
}
inline ::google::protobuf::uint64 Fmd::fid() const {
  return fid_;
}
inline void Fmd::set_fid(::google::protobuf::uint64 value) {
  _set_bit(0);
  fid_ = value;
}

// optional fixed64 cid = 2;
inline bool Fmd::has_cid() const {
  return _has_bit(1);
}
inline void Fmd::clear_cid() {
  cid_ = GOOGLE_ULONGLONG(0);
  _clear_bit(1);
}
inline ::google::protobuf::uint64 Fmd::cid() const {
  return cid_;
}
inline void Fmd::set_cid(::google::protobuf::uint64 value) {
  _set_bit(1);
  cid_ = value;
}

// optional fixed32 fsid = 3;
inline bool Fmd::has_fsid() const {
  return _has_bit(2);
}
inline void Fmd::clear_fsid() {
  fsid_ = 0u;
  _clear_bit(2);
}
inline ::google::protobuf::uint32 Fmd::fsid() const {
  return fsid_;
}
inline void Fmd::set_fsid(::google::protobuf::uint32 value) {
  _set_bit(2);
  fsid_ = value;
}

// optional fixed32 ctime = 4;
inline bool Fmd::has_ctime() const {
  return _has_bit(3);
}
inline void Fmd::clear_ctime() {
  ctime_ = 0u;
  _clear_bit(3);
}
inline ::google::protobuf::uint32 Fmd::ctime() const {
  return ctime_;
}
inline void Fmd::set_ctime(::google::protobuf::uint32 value) {
  _set_bit(3);
  ctime_ = value;
}

// optional fixed32 ctime_ns = 5;
inline bool Fmd::has_ctime_ns() const {
  return _has_bit(4);
}
inline void Fmd::clear_ctime_ns() {
  ctime_ns_ = 0u;
  _clear_bit(4);
}
inline ::google::protobuf::uint32 Fmd::ctime_ns() const {
  return ctime_ns_;
}
inline void Fmd::set_ctime_ns(::google::protobuf::uint32 value) {
  _set_bit(4);
  ctime_ns_ = value;
}

// optional fixed32 mtime = 6;
inline bool Fmd::has_mtime() const {
  return _has_bit(5);
}
inline void Fmd::clear_mtime() {
  mtime_ = 0u;
  _clear_bit(5);
}
inline ::google::protobuf::uint32 Fmd::mtime() const {
  return mtime_;
}
inline void Fmd::set_mtime(::google::protobuf::uint32 value) {
  _set_bit(5);
  mtime_ = value;
}

// optional fixed32 mtime_ns = 7;
inline bool Fmd::has_mtime_ns() const {
  return _has_bit(6);
}
inline void Fmd::clear_mtime_ns() {
  mtime_ns_ = 0u;
  _clear_bit(6);
}
inline ::google::protobuf::uint32 Fmd::mtime_ns() const {
  return mtime_ns_;
}
inline void Fmd::set_mtime_ns(::google::protobuf::uint32 value) {
  _set_bit(6);
  mtime_ns_ = value;
}

// optional fixed32 atime = 8;
inline bool Fmd::has_atime() const {
  return _has_bit(7);
}
inline void Fmd::clear_atime() {
  atime_ = 0u;
  _clear_bit(7);
}
inline ::google::protobuf::uint32 Fmd::atime() const {
  return atime_;
}
inline void Fmd::set_atime(::google::protobuf::uint32 value) {
  _set_bit(7);
  atime_ = value;
}

// optional fixed32 atime_ns = 9;
inline bool Fmd::has_atime_ns() const {
  return _has_bit(8);
}
inline void Fmd::clear_atime_ns() {
  atime_ns_ = 0u;
  _clear_bit(8);
}
inline ::google::protobuf::uint32 Fmd::atime_ns() const {
  return atime_ns_;
}
inline void Fmd::set_atime_ns(::google::protobuf::uint32 value) {
  _set_bit(8);
  atime_ns_ = value;
}

// optional fixed32 checktime = 10;
inline bool Fmd::has_checktime() const {
  return _has_bit(9);
}
inline void Fmd::clear_checktime() {
  checktime_ = 0u;
  _clear_bit(9);
}
inline ::google::protobuf::uint32 Fmd::checktime() const {
  return checktime_;
}
inline void Fmd::set_checktime(::google::protobuf::uint32 value) {
  _set_bit(9);
  checktime_ = value;
}

// optional fixed64 size = 11;
inline bool Fmd::has_size() const {
  return _has_bit(10);
}
inline void Fmd::clear_size() {
  size_ = GOOGLE_ULONGLONG(0);
  _clear_bit(10);
}
inline ::google::protobuf::uint64 Fmd::size() const {
  return size_;
}
inline void Fmd::set_size(::google::protobuf::uint64 value) {
  _set_bit(10);
  size_ = value;
}

// optional fixed64 disksize = 12;
inline bool Fmd::has_disksize() const {
  return _has_bit(11);
}
inline void Fmd::clear_disksize() {
  disksize_ = GOOGLE_ULONGLONG(0);
  _clear_bit(11);
}
inline ::google::protobuf::uint64 Fmd::disksize() const {
  return disksize_;
}
inline void Fmd::set_disksize(::google::protobuf::uint64 value) {
  _set_bit(11);
  disksize_ = value;
}

// optional fixed64 mgmsize = 13;
inline bool Fmd::has_mgmsize() const {
  return _has_bit(12);
}
inline void Fmd::clear_mgmsize() {
  mgmsize_ = GOOGLE_ULONGLONG(0);
  _clear_bit(12);
}
inline ::google::protobuf::uint64 Fmd::mgmsize() const {
  return mgmsize_;
}
inline void Fmd::set_mgmsize(::google::protobuf::uint64 value) {
  _set_bit(12);
  mgmsize_ = value;
}

// optional string checksum = 14;
inline bool Fmd::has_checksum() const {
  return _has_bit(13);
}
inline void Fmd::clear_checksum() {
  if (checksum_ != &_default_checksum_) {
    checksum_->clear();
  }
  _clear_bit(13);
}
inline const ::std::string& Fmd::checksum() const {
  return *checksum_;
}
inline void Fmd::set_checksum(const ::std::string& value) {
  _set_bit(13);
  if (checksum_ == &_default_checksum_) {
    checksum_ = new ::std::string;
  }
  checksum_->assign(value);
}
inline void Fmd::set_checksum(const char* value) {
  _set_bit(13);
  if (checksum_ == &_default_checksum_) {
    checksum_ = new ::std::string;
  }
  checksum_->assign(value);
}
inline void Fmd::set_checksum(const char* value, size_t size) {
  _set_bit(13);
  if (checksum_ == &_default_checksum_) {
    checksum_ = new ::std::string;
  }
  checksum_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Fmd::mutable_checksum() {
  _set_bit(13);
  if (checksum_ == &_default_checksum_) {
    checksum_ = new ::std::string;
  }
  return checksum_;
}

// optional string diskchecksum = 15;
inline bool Fmd::has_diskchecksum() const {
  return _has_bit(14);
}
inline void Fmd::clear_diskchecksum() {
  if (diskchecksum_ != &_default_diskchecksum_) {
    diskchecksum_->clear();
  }
  _clear_bit(14);
}
inline const ::std::string& Fmd::diskchecksum() const {
  return *diskchecksum_;
}
inline void Fmd::set_diskchecksum(const ::std::string& value) {
  _set_bit(14);
  if (diskchecksum_ == &_default_diskchecksum_) {
    diskchecksum_ = new ::std::string;
  }
  diskchecksum_->assign(value);
}
inline void Fmd::set_diskchecksum(const char* value) {
  _set_bit(14);
  if (diskchecksum_ == &_default_diskchecksum_) {
    diskchecksum_ = new ::std::string;
  }
  diskchecksum_->assign(value);
}
inline void Fmd::set_diskchecksum(const char* value, size_t size) {
  _set_bit(14);
  if (diskchecksum_ == &_default_diskchecksum_) {
    diskchecksum_ = new ::std::string;
  }
  diskchecksum_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Fmd::mutable_diskchecksum() {
  _set_bit(14);
  if (diskchecksum_ == &_default_diskchecksum_) {
    diskchecksum_ = new ::std::string;
  }
  return diskchecksum_;
}

// optional string mgmchecksum = 16;
inline bool Fmd::has_mgmchecksum() const {
  return _has_bit(15);
}
inline void Fmd::clear_mgmchecksum() {
  if (mgmchecksum_ != &_default_mgmchecksum_) {
    mgmchecksum_->clear();
  }
  _clear_bit(15);
}
inline const ::std::string& Fmd::mgmchecksum() const {
  return *mgmchecksum_;
}
inline void Fmd::set_mgmchecksum(const ::std::string& value) {
  _set_bit(15);
  if (mgmchecksum_ == &_default_mgmchecksum_) {
    mgmchecksum_ = new ::std::string;
  }
  mgmchecksum_->assign(value);
}
inline void Fmd::set_mgmchecksum(const char* value) {
  _set_bit(15);
  if (mgmchecksum_ == &_default_mgmchecksum_) {
    mgmchecksum_ = new ::std::string;
  }
  mgmchecksum_->assign(value);
}
inline void Fmd::set_mgmchecksum(const char* value, size_t size) {
  _set_bit(15);
  if (mgmchecksum_ == &_default_mgmchecksum_) {
    mgmchecksum_ = new ::std::string;
  }
  mgmchecksum_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Fmd::mutable_mgmchecksum() {
  _set_bit(15);
  if (mgmchecksum_ == &_default_mgmchecksum_) {
    mgmchecksum_ = new ::std::string;
  }
  return mgmchecksum_;
}

// optional fixed32 lid = 17;
inline bool Fmd::has_lid() const {
  return _has_bit(16);
}
inline void Fmd::clear_lid() {
  lid_ = 0u;
  _clear_bit(16);
}
inline ::google::protobuf::uint32 Fmd::lid() const {
  return lid_;
}
inline void Fmd::set_lid(::google::protobuf::uint32 value) {
  _set_bit(16);
  lid_ = value;
}

// optional fixed32 uid = 18;
inline bool Fmd::has_uid() const {
  return _has_bit(17);
}
inline void Fmd::clear_uid() {
  uid_ = 0u;
  _clear_bit(17);
}
inline ::google::protobuf::uint32 Fmd::uid() const {
  return uid_;
}
inline void Fmd::set_uid(::google::protobuf::uint32 value) {
  _set_bit(17);
  uid_ = value;
}

// optional fixed32 gid = 19;
inline bool Fmd::has_gid() const {
  return _has_bit(18);
}
inline void Fmd::clear_gid() {
  gid_ = 0u;
  _clear_bit(18);
}
inline ::google::protobuf::uint32 Fmd::gid() const {
  return gid_;
}
inline void Fmd::set_gid(::google::protobuf::uint32 value) {
  _set_bit(18);
  gid_ = value;
}

// optional sint64 filecxerror = 20;
inline bool Fmd::has_filecxerror() const {
  return _has_bit(19);
}
inline void Fmd::clear_filecxerror() {
  filecxerror_ = GOOGLE_LONGLONG(0);
  _clear_bit(19);
}
inline ::google::protobuf::int64 Fmd::filecxerror() const {
  return filecxerror_;
}
inline void Fmd::set_filecxerror(::google::protobuf::int64 value) {
  _set_bit(19);
  filecxerror_ = value;
}

// optional sint64 blockcxerror = 21;
inline bool Fmd::has_blockcxerror() const {
  return _has_bit(20);
}
inline void Fmd::clear_blockcxerror() {
  blockcxerror_ = GOOGLE_LONGLONG(0);
  _clear_bit(20);
}
inline ::google::protobuf::int64 Fmd::blockcxerror() const {
  return blockcxerror_;
}
inline void Fmd::set_blockcxerror(::google::protobuf::int64 value) {
  _set_bit(20);
  blockcxerror_ = value;
}

// optional sint64 layouterror = 22;
inline bool Fmd::has_layouterror() const {
  return _has_bit(21);
}
inline void Fmd::clear_layouterror() {
  layouterror_ = GOOGLE_LONGLONG(0);
  _clear_bit(21);
}
inline ::google::protobuf::int64 Fmd::layouterror() const {
  return layouterror_;
}
inline void Fmd::set_layouterror(::google::protobuf::int64 value) {
  _set_bit(21);
  layouterror_ = value;
}

// optional string locations = 23;
inline bool Fmd::has_locations() const {
  return _has_bit(22);
}
inline void Fmd::clear_locations() {
  if (locations_ != &_default_locations_) {
    locations_->clear();
  }
  _clear_bit(22);
}
inline const ::std::string& Fmd::locations() const {
  return *locations_;
}
inline void Fmd::set_locations(const ::std::string& value) {
  _set_bit(22);
  if (locations_ == &_default_locations_) {
    locations_ = new ::std::string;
  }
  locations_->assign(value);
}
inline void Fmd::set_locations(const char* value) {
  _set_bit(22);
  if (locations_ == &_default_locations_) {
    locations_ = new ::std::string;
  }
  locations_->assign(value);
}
inline void Fmd::set_locations(const char* value, size_t size) {
  _set_bit(22);
  if (locations_ == &_default_locations_) {
    locations_ = new ::std::string;
  }
  locations_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Fmd::mutable_locations() {
  _set_bit(22);
  if (locations_ == &_default_locations_) {
    locations_ = new ::std::string;
  }
  return locations_;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace tutorial

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_test_2eproto__INCLUDED
