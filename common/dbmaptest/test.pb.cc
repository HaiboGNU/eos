// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "test.pb.h"
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace tutorial {

namespace {

const ::google::protobuf::Descriptor* Fmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Fmd_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_test_2eproto() {
  protobuf_AddDesc_test_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "test.proto");
  GOOGLE_CHECK(file != NULL);
  Fmd_descriptor_ = file->message_type(0);
  static const int Fmd_offsets_[23] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Fmd, fid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Fmd, cid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Fmd, fsid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Fmd, ctime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Fmd, ctime_ns_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Fmd, mtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Fmd, mtime_ns_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Fmd, atime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Fmd, atime_ns_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Fmd, checktime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Fmd, size_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Fmd, disksize_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Fmd, mgmsize_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Fmd, checksum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Fmd, diskchecksum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Fmd, mgmchecksum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Fmd, lid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Fmd, uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Fmd, gid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Fmd, filecxerror_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Fmd, blockcxerror_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Fmd, layouterror_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Fmd, locations_),
  };
  Fmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Fmd_descriptor_,
      Fmd::default_instance_,
      Fmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Fmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Fmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Fmd));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_test_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Fmd_descriptor_, &Fmd::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_test_2eproto() {
  delete Fmd::default_instance_;
  delete Fmd_reflection_;
}

void protobuf_AddDesc_test_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\ntest.proto\022\010tutorial\"\213\003\n\003Fmd\022\013\n\003fid\030\001 "
    "\001(\006\022\013\n\003cid\030\002 \001(\006\022\014\n\004fsid\030\003 \001(\007\022\r\n\005ctime\030"
    "\004 \001(\007\022\020\n\010ctime_ns\030\005 \001(\007\022\r\n\005mtime\030\006 \001(\007\022\020"
    "\n\010mtime_ns\030\007 \001(\007\022\r\n\005atime\030\010 \001(\007\022\020\n\010atime"
    "_ns\030\t \001(\007\022\021\n\tchecktime\030\n \001(\007\022\014\n\004size\030\013 \001"
    "(\006\022\020\n\010disksize\030\014 \001(\006\022\017\n\007mgmsize\030\r \001(\006\022\020\n"
    "\010checksum\030\016 \001(\t\022\024\n\014diskchecksum\030\017 \001(\t\022\023\n"
    "\013mgmchecksum\030\020 \001(\t\022\013\n\003lid\030\021 \001(\007\022\013\n\003uid\030\022"
    " \001(\007\022\013\n\003gid\030\023 \001(\007\022\023\n\013filecxerror\030\024 \001(\022\022\024"
    "\n\014blockcxerror\030\025 \001(\022\022\023\n\013layouterror\030\026 \001("
    "\022\022\021\n\tlocations\030\027 \001(\t", 420);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "test.proto", &protobuf_RegisterTypes);
  Fmd::default_instance_ = new Fmd();
  Fmd::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_test_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_test_2eproto {
  StaticDescriptorInitializer_test_2eproto() {
    protobuf_AddDesc_test_2eproto();
  }
} static_descriptor_initializer_test_2eproto_;


// ===================================================================

const ::std::string Fmd::_default_checksum_;
const ::std::string Fmd::_default_diskchecksum_;
const ::std::string Fmd::_default_mgmchecksum_;
const ::std::string Fmd::_default_locations_;
#ifndef _MSC_VER
const int Fmd::kFidFieldNumber;
const int Fmd::kCidFieldNumber;
const int Fmd::kFsidFieldNumber;
const int Fmd::kCtimeFieldNumber;
const int Fmd::kCtimeNsFieldNumber;
const int Fmd::kMtimeFieldNumber;
const int Fmd::kMtimeNsFieldNumber;
const int Fmd::kAtimeFieldNumber;
const int Fmd::kAtimeNsFieldNumber;
const int Fmd::kChecktimeFieldNumber;
const int Fmd::kSizeFieldNumber;
const int Fmd::kDisksizeFieldNumber;
const int Fmd::kMgmsizeFieldNumber;
const int Fmd::kChecksumFieldNumber;
const int Fmd::kDiskchecksumFieldNumber;
const int Fmd::kMgmchecksumFieldNumber;
const int Fmd::kLidFieldNumber;
const int Fmd::kUidFieldNumber;
const int Fmd::kGidFieldNumber;
const int Fmd::kFilecxerrorFieldNumber;
const int Fmd::kBlockcxerrorFieldNumber;
const int Fmd::kLayouterrorFieldNumber;
const int Fmd::kLocationsFieldNumber;
#endif  // !_MSC_VER

Fmd::Fmd()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Fmd::InitAsDefaultInstance() {
}

Fmd::Fmd(const Fmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Fmd::SharedCtor() {
  _cached_size_ = 0;
  fid_ = GOOGLE_ULONGLONG(0);
  cid_ = GOOGLE_ULONGLONG(0);
  fsid_ = 0u;
  ctime_ = 0u;
  ctime_ns_ = 0u;
  mtime_ = 0u;
  mtime_ns_ = 0u;
  atime_ = 0u;
  atime_ns_ = 0u;
  checktime_ = 0u;
  size_ = GOOGLE_ULONGLONG(0);
  disksize_ = GOOGLE_ULONGLONG(0);
  mgmsize_ = GOOGLE_ULONGLONG(0);
  checksum_ = const_cast< ::std::string*>(&_default_checksum_);
  diskchecksum_ = const_cast< ::std::string*>(&_default_diskchecksum_);
  mgmchecksum_ = const_cast< ::std::string*>(&_default_mgmchecksum_);
  lid_ = 0u;
  uid_ = 0u;
  gid_ = 0u;
  filecxerror_ = GOOGLE_LONGLONG(0);
  blockcxerror_ = GOOGLE_LONGLONG(0);
  layouterror_ = GOOGLE_LONGLONG(0);
  locations_ = const_cast< ::std::string*>(&_default_locations_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Fmd::~Fmd() {
  SharedDtor();
}

void Fmd::SharedDtor() {
  if (checksum_ != &_default_checksum_) {
    delete checksum_;
  }
  if (diskchecksum_ != &_default_diskchecksum_) {
    delete diskchecksum_;
  }
  if (mgmchecksum_ != &_default_mgmchecksum_) {
    delete mgmchecksum_;
  }
  if (locations_ != &_default_locations_) {
    delete locations_;
  }
  if (this != default_instance_) {
  }
}

void Fmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Fmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Fmd_descriptor_;
}

const Fmd& Fmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_test_2eproto();  return *default_instance_;
}

Fmd* Fmd::default_instance_ = NULL;

Fmd* Fmd::New() const {
  return new Fmd;
}

void Fmd::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    fid_ = GOOGLE_ULONGLONG(0);
    cid_ = GOOGLE_ULONGLONG(0);
    fsid_ = 0u;
    ctime_ = 0u;
    ctime_ns_ = 0u;
    mtime_ = 0u;
    mtime_ns_ = 0u;
    atime_ = 0u;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    atime_ns_ = 0u;
    checktime_ = 0u;
    size_ = GOOGLE_ULONGLONG(0);
    disksize_ = GOOGLE_ULONGLONG(0);
    mgmsize_ = GOOGLE_ULONGLONG(0);
    if (_has_bit(13)) {
      if (checksum_ != &_default_checksum_) {
        checksum_->clear();
      }
    }
    if (_has_bit(14)) {
      if (diskchecksum_ != &_default_diskchecksum_) {
        diskchecksum_->clear();
      }
    }
    if (_has_bit(15)) {
      if (mgmchecksum_ != &_default_mgmchecksum_) {
        mgmchecksum_->clear();
      }
    }
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    lid_ = 0u;
    uid_ = 0u;
    gid_ = 0u;
    filecxerror_ = GOOGLE_LONGLONG(0);
    blockcxerror_ = GOOGLE_LONGLONG(0);
    layouterror_ = GOOGLE_LONGLONG(0);
    if (_has_bit(22)) {
      if (locations_ != &_default_locations_) {
        locations_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Fmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed64 fid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &fid_)));
          _set_bit(0);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(17)) goto parse_cid;
        break;
      }
      
      // optional fixed64 cid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_cid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &cid_)));
          _set_bit(1);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(29)) goto parse_fsid;
        break;
      }
      
      // optional fixed32 fsid = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_fsid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &fsid_)));
          _set_bit(2);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(37)) goto parse_ctime;
        break;
      }
      
      // optional fixed32 ctime = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_ctime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &ctime_)));
          _set_bit(3);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(45)) goto parse_ctime_ns;
        break;
      }
      
      // optional fixed32 ctime_ns = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_ctime_ns:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &ctime_ns_)));
          _set_bit(4);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(53)) goto parse_mtime;
        break;
      }
      
      // optional fixed32 mtime = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_mtime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &mtime_)));
          _set_bit(5);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(61)) goto parse_mtime_ns;
        break;
      }
      
      // optional fixed32 mtime_ns = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_mtime_ns:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &mtime_ns_)));
          _set_bit(6);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(69)) goto parse_atime;
        break;
      }
      
      // optional fixed32 atime = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_atime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &atime_)));
          _set_bit(7);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(77)) goto parse_atime_ns;
        break;
      }
      
      // optional fixed32 atime_ns = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_atime_ns:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &atime_ns_)));
          _set_bit(8);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(85)) goto parse_checktime;
        break;
      }
      
      // optional fixed32 checktime = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_checktime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &checktime_)));
          _set_bit(9);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(89)) goto parse_size;
        break;
      }
      
      // optional fixed64 size = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_size:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &size_)));
          _set_bit(10);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(97)) goto parse_disksize;
        break;
      }
      
      // optional fixed64 disksize = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_disksize:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &disksize_)));
          _set_bit(11);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(105)) goto parse_mgmsize;
        break;
      }
      
      // optional fixed64 mgmsize = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_mgmsize:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &mgmsize_)));
          _set_bit(12);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(114)) goto parse_checksum;
        break;
      }
      
      // optional string checksum = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_checksum:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_checksum()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->checksum().data(), this->checksum().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(122)) goto parse_diskchecksum;
        break;
      }
      
      // optional string diskchecksum = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_diskchecksum:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_diskchecksum()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->diskchecksum().data(), this->diskchecksum().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(130)) goto parse_mgmchecksum;
        break;
      }
      
      // optional string mgmchecksum = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_mgmchecksum:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_mgmchecksum()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->mgmchecksum().data(), this->mgmchecksum().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(141)) goto parse_lid;
        break;
      }
      
      // optional fixed32 lid = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_lid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &lid_)));
          _set_bit(16);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(149)) goto parse_uid;
        break;
      }
      
      // optional fixed32 uid = 18;
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_uid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &uid_)));
          _set_bit(17);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(157)) goto parse_gid;
        break;
      }
      
      // optional fixed32 gid = 19;
      case 19: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_gid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &gid_)));
          _set_bit(18);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(160)) goto parse_filecxerror;
        break;
      }
      
      // optional sint64 filecxerror = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_filecxerror:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SINT64>(
                 input, &filecxerror_)));
          _set_bit(19);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(168)) goto parse_blockcxerror;
        break;
      }
      
      // optional sint64 blockcxerror = 21;
      case 21: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_blockcxerror:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SINT64>(
                 input, &blockcxerror_)));
          _set_bit(20);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(176)) goto parse_layouterror;
        break;
      }
      
      // optional sint64 layouterror = 22;
      case 22: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_layouterror:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SINT64>(
                 input, &layouterror_)));
          _set_bit(21);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(186)) goto parse_locations;
        break;
      }
      
      // optional string locations = 23;
      case 23: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_locations:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_locations()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->locations().data(), this->locations().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Fmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional fixed64 fid = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->fid(), output);
  }
  
  // optional fixed64 cid = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(2, this->cid(), output);
  }
  
  // optional fixed32 fsid = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(3, this->fsid(), output);
  }
  
  // optional fixed32 ctime = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(4, this->ctime(), output);
  }
  
  // optional fixed32 ctime_ns = 5;
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(5, this->ctime_ns(), output);
  }
  
  // optional fixed32 mtime = 6;
  if (_has_bit(5)) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(6, this->mtime(), output);
  }
  
  // optional fixed32 mtime_ns = 7;
  if (_has_bit(6)) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(7, this->mtime_ns(), output);
  }
  
  // optional fixed32 atime = 8;
  if (_has_bit(7)) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(8, this->atime(), output);
  }
  
  // optional fixed32 atime_ns = 9;
  if (_has_bit(8)) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(9, this->atime_ns(), output);
  }
  
  // optional fixed32 checktime = 10;
  if (_has_bit(9)) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(10, this->checktime(), output);
  }
  
  // optional fixed64 size = 11;
  if (_has_bit(10)) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(11, this->size(), output);
  }
  
  // optional fixed64 disksize = 12;
  if (_has_bit(11)) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(12, this->disksize(), output);
  }
  
  // optional fixed64 mgmsize = 13;
  if (_has_bit(12)) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(13, this->mgmsize(), output);
  }
  
  // optional string checksum = 14;
  if (_has_bit(13)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->checksum().data(), this->checksum().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      14, this->checksum(), output);
  }
  
  // optional string diskchecksum = 15;
  if (_has_bit(14)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->diskchecksum().data(), this->diskchecksum().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      15, this->diskchecksum(), output);
  }
  
  // optional string mgmchecksum = 16;
  if (_has_bit(15)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->mgmchecksum().data(), this->mgmchecksum().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      16, this->mgmchecksum(), output);
  }
  
  // optional fixed32 lid = 17;
  if (_has_bit(16)) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(17, this->lid(), output);
  }
  
  // optional fixed32 uid = 18;
  if (_has_bit(17)) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(18, this->uid(), output);
  }
  
  // optional fixed32 gid = 19;
  if (_has_bit(18)) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(19, this->gid(), output);
  }
  
  // optional sint64 filecxerror = 20;
  if (_has_bit(19)) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt64(20, this->filecxerror(), output);
  }
  
  // optional sint64 blockcxerror = 21;
  if (_has_bit(20)) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt64(21, this->blockcxerror(), output);
  }
  
  // optional sint64 layouterror = 22;
  if (_has_bit(21)) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt64(22, this->layouterror(), output);
  }
  
  // optional string locations = 23;
  if (_has_bit(22)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->locations().data(), this->locations().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      23, this->locations(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Fmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional fixed64 fid = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->fid(), target);
  }
  
  // optional fixed64 cid = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(2, this->cid(), target);
  }
  
  // optional fixed32 fsid = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(3, this->fsid(), target);
  }
  
  // optional fixed32 ctime = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(4, this->ctime(), target);
  }
  
  // optional fixed32 ctime_ns = 5;
  if (_has_bit(4)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(5, this->ctime_ns(), target);
  }
  
  // optional fixed32 mtime = 6;
  if (_has_bit(5)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(6, this->mtime(), target);
  }
  
  // optional fixed32 mtime_ns = 7;
  if (_has_bit(6)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(7, this->mtime_ns(), target);
  }
  
  // optional fixed32 atime = 8;
  if (_has_bit(7)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(8, this->atime(), target);
  }
  
  // optional fixed32 atime_ns = 9;
  if (_has_bit(8)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(9, this->atime_ns(), target);
  }
  
  // optional fixed32 checktime = 10;
  if (_has_bit(9)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(10, this->checktime(), target);
  }
  
  // optional fixed64 size = 11;
  if (_has_bit(10)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(11, this->size(), target);
  }
  
  // optional fixed64 disksize = 12;
  if (_has_bit(11)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(12, this->disksize(), target);
  }
  
  // optional fixed64 mgmsize = 13;
  if (_has_bit(12)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(13, this->mgmsize(), target);
  }
  
  // optional string checksum = 14;
  if (_has_bit(13)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->checksum().data(), this->checksum().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        14, this->checksum(), target);
  }
  
  // optional string diskchecksum = 15;
  if (_has_bit(14)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->diskchecksum().data(), this->diskchecksum().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        15, this->diskchecksum(), target);
  }
  
  // optional string mgmchecksum = 16;
  if (_has_bit(15)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->mgmchecksum().data(), this->mgmchecksum().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        16, this->mgmchecksum(), target);
  }
  
  // optional fixed32 lid = 17;
  if (_has_bit(16)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(17, this->lid(), target);
  }
  
  // optional fixed32 uid = 18;
  if (_has_bit(17)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(18, this->uid(), target);
  }
  
  // optional fixed32 gid = 19;
  if (_has_bit(18)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(19, this->gid(), target);
  }
  
  // optional sint64 filecxerror = 20;
  if (_has_bit(19)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt64ToArray(20, this->filecxerror(), target);
  }
  
  // optional sint64 blockcxerror = 21;
  if (_has_bit(20)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt64ToArray(21, this->blockcxerror(), target);
  }
  
  // optional sint64 layouterror = 22;
  if (_has_bit(21)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt64ToArray(22, this->layouterror(), target);
  }
  
  // optional string locations = 23;
  if (_has_bit(22)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->locations().data(), this->locations().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        23, this->locations(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Fmd::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional fixed64 fid = 1;
    if (has_fid()) {
      total_size += 1 + 8;
    }
    
    // optional fixed64 cid = 2;
    if (has_cid()) {
      total_size += 1 + 8;
    }
    
    // optional fixed32 fsid = 3;
    if (has_fsid()) {
      total_size += 1 + 4;
    }
    
    // optional fixed32 ctime = 4;
    if (has_ctime()) {
      total_size += 1 + 4;
    }
    
    // optional fixed32 ctime_ns = 5;
    if (has_ctime_ns()) {
      total_size += 1 + 4;
    }
    
    // optional fixed32 mtime = 6;
    if (has_mtime()) {
      total_size += 1 + 4;
    }
    
    // optional fixed32 mtime_ns = 7;
    if (has_mtime_ns()) {
      total_size += 1 + 4;
    }
    
    // optional fixed32 atime = 8;
    if (has_atime()) {
      total_size += 1 + 4;
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional fixed32 atime_ns = 9;
    if (has_atime_ns()) {
      total_size += 1 + 4;
    }
    
    // optional fixed32 checktime = 10;
    if (has_checktime()) {
      total_size += 1 + 4;
    }
    
    // optional fixed64 size = 11;
    if (has_size()) {
      total_size += 1 + 8;
    }
    
    // optional fixed64 disksize = 12;
    if (has_disksize()) {
      total_size += 1 + 8;
    }
    
    // optional fixed64 mgmsize = 13;
    if (has_mgmsize()) {
      total_size += 1 + 8;
    }
    
    // optional string checksum = 14;
    if (has_checksum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->checksum());
    }
    
    // optional string diskchecksum = 15;
    if (has_diskchecksum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->diskchecksum());
    }
    
    // optional string mgmchecksum = 16;
    if (has_mgmchecksum()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->mgmchecksum());
    }
    
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional fixed32 lid = 17;
    if (has_lid()) {
      total_size += 2 + 4;
    }
    
    // optional fixed32 uid = 18;
    if (has_uid()) {
      total_size += 2 + 4;
    }
    
    // optional fixed32 gid = 19;
    if (has_gid()) {
      total_size += 2 + 4;
    }
    
    // optional sint64 filecxerror = 20;
    if (has_filecxerror()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::SInt64Size(
          this->filecxerror());
    }
    
    // optional sint64 blockcxerror = 21;
    if (has_blockcxerror()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::SInt64Size(
          this->blockcxerror());
    }
    
    // optional sint64 layouterror = 22;
    if (has_layouterror()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::SInt64Size(
          this->layouterror());
    }
    
    // optional string locations = 23;
    if (has_locations()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->locations());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Fmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Fmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Fmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Fmd::MergeFrom(const Fmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_fid(from.fid());
    }
    if (from._has_bit(1)) {
      set_cid(from.cid());
    }
    if (from._has_bit(2)) {
      set_fsid(from.fsid());
    }
    if (from._has_bit(3)) {
      set_ctime(from.ctime());
    }
    if (from._has_bit(4)) {
      set_ctime_ns(from.ctime_ns());
    }
    if (from._has_bit(5)) {
      set_mtime(from.mtime());
    }
    if (from._has_bit(6)) {
      set_mtime_ns(from.mtime_ns());
    }
    if (from._has_bit(7)) {
      set_atime(from.atime());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from._has_bit(8)) {
      set_atime_ns(from.atime_ns());
    }
    if (from._has_bit(9)) {
      set_checktime(from.checktime());
    }
    if (from._has_bit(10)) {
      set_size(from.size());
    }
    if (from._has_bit(11)) {
      set_disksize(from.disksize());
    }
    if (from._has_bit(12)) {
      set_mgmsize(from.mgmsize());
    }
    if (from._has_bit(13)) {
      set_checksum(from.checksum());
    }
    if (from._has_bit(14)) {
      set_diskchecksum(from.diskchecksum());
    }
    if (from._has_bit(15)) {
      set_mgmchecksum(from.mgmchecksum());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from._has_bit(16)) {
      set_lid(from.lid());
    }
    if (from._has_bit(17)) {
      set_uid(from.uid());
    }
    if (from._has_bit(18)) {
      set_gid(from.gid());
    }
    if (from._has_bit(19)) {
      set_filecxerror(from.filecxerror());
    }
    if (from._has_bit(20)) {
      set_blockcxerror(from.blockcxerror());
    }
    if (from._has_bit(21)) {
      set_layouterror(from.layouterror());
    }
    if (from._has_bit(22)) {
      set_locations(from.locations());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Fmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Fmd::CopyFrom(const Fmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Fmd::IsInitialized() const {
  
  return true;
}

void Fmd::Swap(Fmd* other) {
  if (other != this) {
    std::swap(fid_, other->fid_);
    std::swap(cid_, other->cid_);
    std::swap(fsid_, other->fsid_);
    std::swap(ctime_, other->ctime_);
    std::swap(ctime_ns_, other->ctime_ns_);
    std::swap(mtime_, other->mtime_);
    std::swap(mtime_ns_, other->mtime_ns_);
    std::swap(atime_, other->atime_);
    std::swap(atime_ns_, other->atime_ns_);
    std::swap(checktime_, other->checktime_);
    std::swap(size_, other->size_);
    std::swap(disksize_, other->disksize_);
    std::swap(mgmsize_, other->mgmsize_);
    std::swap(checksum_, other->checksum_);
    std::swap(diskchecksum_, other->diskchecksum_);
    std::swap(mgmchecksum_, other->mgmchecksum_);
    std::swap(lid_, other->lid_);
    std::swap(uid_, other->uid_);
    std::swap(gid_, other->gid_);
    std::swap(filecxerror_, other->filecxerror_);
    std::swap(blockcxerror_, other->blockcxerror_);
    std::swap(layouterror_, other->layouterror_);
    std::swap(locations_, other->locations_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Fmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Fmd_descriptor_;
  metadata.reflection = Fmd_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace tutorial

// @@protoc_insertion_point(global_scope)
