//------------------------------------------------------------------------------
//! @file FsIo.hh
//! @author Elvin-Alin Sindrilaru - CERN
//! @brief Class used for doing local IO operations
//------------------------------------------------------------------------------

/************************************************************************
 * EOS - the CERN Disk Storage System                                   *
 * Copyright (C) 2011 CERN/Switzerland                                  *
 *                                                                      *
 * This program is free software: you can redistribute it and/or modify *
 * it under the terms of the GNU General Public License as published by *
 * the Free Software Foundation, either version 3 of the License, or    *
 * (at your option) any later version.                                  *
 *                                                                      *
 * This program is distributed in the hope that it will be useful,      *
 * but WITHOUT ANY WARRANTY; without even the implied warranty of       *
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the        *
 * GNU General Public License for more details.                         *
 *                                                                      *
 * You should have received a copy of the GNU General Public License    *
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.*
 ************************************************************************/

#ifndef __EOSFST_FSFILEIO__HH__
#define __EOSFST_FSFILEIO__HH__

#include "fst/io/FileIo.hh"
<<<<<<< HEAD:fst/io/local/FsIo.hh

/*----------------------------------------------------------------------------*/
=======
#include "fst/io/SimpleHandler.hh"
#include "XrdCl/XrdClFile.hh"
#include "XrdCl/XrdClXRootDResponses.hh"
>>>>>>> 7c1f8b5965059ac55872b220632da2f60ae4ce9c:fst/io/XrdIo.hh

EOSFSTNAMESPACE_BEGIN
//------------------------------------------------------------------------------
//! Class used for doing local IO operations
//------------------------------------------------------------------------------

<<<<<<< HEAD:fst/io/local/FsIo.hh
class FsIo : public FileIo {
public:
  //--------------------------------------------------------------------------
=======
struct ReadaheadBlock
{
  static const uint64_t sDefaultBlocksize; ///< default value for readahead

  //----------------------------------------------------------------------------
  //! Constuctor
  //!
  //! @param blocksize the size of the readahead
  //!
  //----------------------------------------------------------------------------
  ReadaheadBlock(uint64_t blocksize = sDefaultBlocksize)
  {
    buffer = new char[blocksize];
    handler = new SimpleHandler();
  }

  //----------------------------------------------------------------------------
  //! Update current request
  //!
  //! @param offset offset
  //! @param length length
  //! @param isWrite true if write request, otherwise false
  //!
  //----------------------------------------------------------------------------
  void Update(uint64_t offset, uint32_t length, bool isWrite)
  {
    handler->Update(offset, length, isWrite);
  }

  //----------------------------------------------------------------------------
  //! Destructor
  //----------------------------------------------------------------------------
  virtual ~ReadaheadBlock()
  {
    delete[] buffer;
    delete handler;
  }

  char* buffer; ///< pointer to where the data is read
  SimpleHandler* handler; ///< async handler for the requests
};

//------------------------------------------------------------------------------
//! Class used for handling asynchronous open responses
//------------------------------------------------------------------------------
class AsyncIoOpenHandler: public XrdCl::ResponseHandler,
                          public eos::common::LogId
{
 public:
  //----------------------------------------------------------------------------
>>>>>>> 7c1f8b5965059ac55872b220632da2f60ae4ce9c:fst/io/XrdIo.hh
  //! Constructor
  //!
  //!
  //--------------------------------------------------------------------------
  FsIo(std::string path);

  //--------------------------------------------------------------------------
  //! Constructor
  //!
  //!
<<<<<<< HEAD:fst/io/local/FsIo.hh
  //--------------------------------------------------------------------------
  FsIo(std::string path, std::string iotype);

  //--------------------------------------------------------------------------
  //! Destructor
  //--------------------------------------------------------------------------
  virtual ~FsIo ();
=======
  //----------------------------------------------------------------------------
  XrdIo ();

  //----------------------------------------------------------------------------
  //! Destructor
  //----------------------------------------------------------------------------
  virtual ~XrdIo ();

  //----------------------------------------------------------------------------
  //! Open file - synchronously
  //!
  //! @param path file path
  //! @param flags open flags
  //! @param mode open mode
  //! @param opaque opaque information
  //! @param timeout timeout value
  //!
  //! @return 0 on success, -1 otherwise and error code is set
  //----------------------------------------------------------------------------
  virtual int Open (const std::string& path,
                    XrdSfsFileOpenMode flags,
                    mode_t mode = 0,
                    const std::string& opaque = "",
                    uint16_t timeout = 0);
>>>>>>> 7c1f8b5965059ac55872b220632da2f60ae4ce9c:fst/io/XrdIo.hh

  //--------------------------------------------------------------------------
  //! Open file
  //!
  //! @param flags open flags
  //! @param mode open mode
  //! @param opaque opaque information
  //! @param timeout timeout value
  //! @return 0 if successful, -1 otherwise and error code is set
  //--------------------------------------------------------------------------
  virtual int fileOpen(XrdSfsFileOpenMode flags,
               mode_t mode = 0,
               const std::string& opaque = "",
               uint16_t timeout = 0);

  //--------------------------------------------------------------------------
  //! Read from file - sync
  //!
  //! @param offset offset in file
  //! @param buffer where the data is read
  //! @param length read length
  //! @param timeout timeout value
  //! @return number of bytes read or -1 if error
<<<<<<< HEAD:fst/io/local/FsIo.hh
  //--------------------------------------------------------------------------
  virtual int64_t fileRead(XrdSfsFileOffset offset,
                   char* buffer,
                   XrdSfsXferSize length,
                   uint16_t timeout = 0);
=======
  //!
  //----------------------------------------------------------------------------
  virtual int64_t Read (XrdSfsFileOffset offset,
                        char* buffer,
                        XrdSfsXferSize length,
                        uint16_t timeout = 0);
>>>>>>> 7c1f8b5965059ac55872b220632da2f60ae4ce9c:fst/io/XrdIo.hh

  //--------------------------------------------------------------------------
  //! Write to file - sync
  //!
  //! @param offset offset
  //! @param buffer data to be written
  //! @param length length
  //! @param timeout timeout value
  //! @return number of bytes written or -1 if error
  //--------------------------------------------------------------------------
<<<<<<< HEAD:fst/io/local/FsIo.hh
  virtual int64_t fileWrite(XrdSfsFileOffset offset,
                    const char* buffer,
                    XrdSfsXferSize length,
                    uint16_t timeout = 0);
=======
  virtual int64_t Write (XrdSfsFileOffset offset,
                         const char* buffer,
                         XrdSfsXferSize length,
                         uint16_t timeout = 0);
>>>>>>> 7c1f8b5965059ac55872b220632da2f60ae4ce9c:fst/io/XrdIo.hh

  //--------------------------------------------------------------------------
  //! Read from file - async
  //!
  //! @param offset offset in file
  //! @param buffer where the data is read
  //! @param length read length
  //! @param readahead set if readahead is to be used
  //! @param timeout timeout value
  //! @return number of bytes read or -1 if error
  //--------------------------------------------------------------------------
<<<<<<< HEAD:fst/io/local/FsIo.hh
  virtual int64_t fileReadAsync(XrdSfsFileOffset offset,
                        char* buffer,
                        XrdSfsXferSize length,
                        bool readahead = false,
                        uint16_t timeout = 0);
=======
  virtual int64_t ReadAsync (XrdSfsFileOffset offset,
                             char* buffer,
                             XrdSfsXferSize length,
                             bool readahead = false,
                             uint16_t timeout = 0);
>>>>>>> 7c1f8b5965059ac55872b220632da2f60ae4ce9c:fst/io/XrdIo.hh

  //--------------------------------------------------------------------------
  //! Write to file - async
  //!
  //! @param offset offset
  //! @param buffer data to be written
  //! @param length length
  //! @param timeout timeout value
  //! @return number of bytes written or -1 if error
  //--------------------------------------------------------------------------
<<<<<<< HEAD:fst/io/local/FsIo.hh
  virtual int64_t fileWriteAsync(XrdSfsFileOffset offset,
                         const char* buffer,
                         XrdSfsXferSize length,
                         uint16_t timeout = 0);
=======
  virtual int64_t WriteAsync (XrdSfsFileOffset offset,
                              const char* buffer,
                              XrdSfsXferSize length,
                              uint16_t timeout = 0);
>>>>>>> 7c1f8b5965059ac55872b220632da2f60ae4ce9c:fst/io/XrdIo.hh

  //--------------------------------------------------------------------------
  //! Truncate
  //!
  //! @param offset truncate file to this value
  //! @param timeout timeout value
  //! @return 0 if successful, -1 otherwise and error code is set
  //--------------------------------------------------------------------------
  virtual int fileTruncate(XrdSfsFileOffset offset, uint16_t timeout = 0);

  //--------------------------------------------------------------------------
  //! Allocate file space
  //!
  //! @param length space to be allocated
  //! @return 0 on success, -1 otherwise and error code is set
  //--------------------------------------------------------------------------
  virtual int fileFallocate(XrdSfsFileOffset length);

<<<<<<< HEAD:fst/io/local/FsIo.hh
  //--------------------------------------------------------------------------
  //! Deallocate file space
  //!
  //! @param fromOffset offset start
  //! @param toOffset offset end
  //! @return 0 on success, -1 otherwise and error code is set
  //--------------------------------------------------------------------------
  virtual int fileFdeallocate(XrdSfsFileOffset fromOffset, XrdSfsFileOffset toOffset);

=======
>>>>>>> 7c1f8b5965059ac55872b220632da2f60ae4ce9c:fst/io/XrdIo.hh
  //--------------------------------------------------------------------------
  //! Remove file
  //!
  //! @param timeout timeout value
  //! @return 0 on success, -1 otherwise and error code is set
  //--------------------------------------------------------------------------
<<<<<<< HEAD:fst/io/local/FsIo.hh
  virtual int fileRemove(uint16_t timeout = 0);
=======
  virtual int Remove (uint16_t timeout = 0);
>>>>>>> 7c1f8b5965059ac55872b220632da2f60ae4ce9c:fst/io/XrdIo.hh

  //--------------------------------------------------------------------------
  //! Sync file to disk
  //!
  //! @param timeout timeout value
  //! @return 0 on success, -1 otherwise and error code is set
  //--------------------------------------------------------------------------
  virtual int fileSync(uint16_t timeout = 0);

  //--------------------------------------------------------------------------
  //! Get pointer to async meta handler object
  //!
  //! @return pointer to async handler, NULL otherwise
  //--------------------------------------------------------------------------
  virtual void* fileGetAsyncHandler();

<<<<<<< HEAD:fst/io/local/FsIo.hh
  //--------------------------------------------------------------------------
  //! Check for the existence of a file
  //!
  //! @param path to the file
  //! @return 0 on success, -1 otherwise and error code is set
  //--------------------------------------------------------------------------
  virtual int fileExists();

=======
>>>>>>> 7c1f8b5965059ac55872b220632da2f60ae4ce9c:fst/io/XrdIo.hh
  //--------------------------------------------------------------------------
  //! Close file
  //!
  //! @param timeout timeout value
  //! @return 0 on success, -1 otherwise and error code is set
  //--------------------------------------------------------------------------
<<<<<<< HEAD:fst/io/local/FsIo.hh
  virtual int fileClose(uint16_t timeout = 0);
=======
  virtual int Close (uint16_t timeout = 0);
>>>>>>> 7c1f8b5965059ac55872b220632da2f60ae4ce9c:fst/io/XrdIo.hh

  //--------------------------------------------------------------------------
  //! Get stats about the file
  //!
  //! @param buf stat buffer
  //! @param timeout timeout value
  //! @return 0 on success, -1 otherwise and error code is set
  //--------------------------------------------------------------------------
  virtual int fileStat(struct stat* buf, uint16_t timeout = 0);

<<<<<<< HEAD:fst/io/local/FsIo.hh
  // ------------------------------------------------------------------------
  //! Set a binary attribute (name has to start with 'user.' !!!)
  //!
  //! @param name attribute name
  //! @param value attribute value
  //! @param len value length
  //! @return 0 on success, -1 otherwise and error code is set
  // ------------------------------------------------------------------------
  virtual int attrSet(const char* name, const char* value, size_t len);

  // ------------------------------------------------------------------------
  //! Set a binary attribute (name has to start with 'user.' !!!)
=======
  //--------------------------------------------------------------------------
  //! Get pointer to async meta handler object
  //!
  //! @return pointer to async handler, NULL otherwise
>>>>>>> 7c1f8b5965059ac55872b220632da2f60ae4ce9c:fst/io/XrdIo.hh
  //!
  //! @param name attribute name
  //! @param value attribute value
  //! @return 0 on success, -1 otherwise and error code is set
  // ------------------------------------------------------------------------
  virtual int attrSet(string name, std::string value);

  // ------------------------------------------------------------------------
  //! Get a binary attribute by name
  //!
  //! @param name attribute name
  //! @param value contains attribute value upon success
  //! @param size the buffer size, after success the value size
  //! @return 0 on success, -1 otherwise and error code is set
  // ------------------------------------------------------------------------
  virtual int attrGet(const char* name, char* value, size_t& size);

<<<<<<< HEAD:fst/io/local/FsIo.hh
  // ------------------------------------------------------------------------
  //! Get a binary attribute by name
=======
  bool mDoReadahead; ///< mark if readahead is enabled
  uint32_t mBlocksize; ///< block size for rd/wr opertations
  std::string mPath; ///< path to file
  XrdCl::File* mXrdFile; ///< handler to xrd file
  AsyncMetaHandler* mMetaHandler; ///< async requests meta handler
  PrefetchMap mMapBlocks; ///< map of block read/prefetched
  std::queue<ReadaheadBlock*> mQueueBlocks; ///< queue containing available blocks
  XrdSysMutex mPrefetchMutex; ///< mutex to serialise the prefetch step

  //--------------------------------------------------------------------------
  //! Method used to prefetch the next block using the readahead mechanism
>>>>>>> 7c1f8b5965059ac55872b220632da2f60ae4ce9c:fst/io/XrdIo.hh
  //!
  //! @param name attribute name
  //! @param value contains attribute value upon success
  //! @return 0 on success, -1 otherwise and error code is set
  // ------------------------------------------------------------------------
  virtual int attrGet(string name, std::string& value);

  // ------------------------------------------------------------------------
  //! Delete a binary attribute by name
  //!
  //! @param name attribute name
  //! @return 0 on success, -1 otherwise and error code is set
  // ------------------------------------------------------------------------
  virtual int attrDelete(const char* name);

  // ------------------------------------------------------------------------
  //! List all attributes for the associated path
  //!
  //! @param list contains all attribute names for the set path upon success
  //! @return 0 on success, -1 otherwise and error code is set
  // ------------------------------------------------------------------------
  virtual int attrList(std::vector<std::string>& list);

  //--------------------------------------------------------------------------
  //! Plug-in function to fill a statfs structure about the storage filling
  //! state
  //! @param path to statfs
  //! @param statfs return struct
  //! @return 0 if successful otherwise errno
  //--------------------------------------------------------------------------
  virtual int Statfs(struct statfs* statFs);

<<<<<<< HEAD:fst/io/local/FsIo.hh
  //--------------------------------------------------------------------------
  //! Class implementing extended attribute support
  //--------------------------------------------------------------------------

  class FtsHandle : public FileIo::FtsHandle {
    friend class FsIo;

  protected:
    char **paths;
    void *tree;
  public:

    FtsHandle (const char* dirp) : FileIo::FtsHandle (dirp)
    {
      paths = (char**) calloc(2, sizeof (char*));
      paths[0] = (char*) dirp;
      paths[1] = 0;
      tree = 0;
    }

    virtual ~FtsHandle ()
    {
      if (paths)
        free(paths);
      paths = 0;
    }
  };
=======
>>>>>>> 7c1f8b5965059ac55872b220632da2f60ae4ce9c:fst/io/XrdIo.hh
  //--------------------------------------------------------------------------
  //! Open a cursor to traverse a storage system
  //! @param subtree where to start traversing
  //! @return returns implementation dependent handle or 0 in case of error
  //--------------------------------------------------------------------------
<<<<<<< HEAD:fst/io/local/FsIo.hh
  virtual FileIo::FtsHandle* ftsOpen ();

  //--------------------------------------------------------------------------
  //! Return the next path related to a traversal cursor obtained with ftsOpen
  //! @param fts_handle cursor obtained by ftsOpen
  //! @return returns implementation dependent handle or 0 in case of error
  //--------------------------------------------------------------------------

  virtual std::string ftsRead (FileIo::FtsHandle* fts_handle);

  //--------------------------------------------------------------------------
  //! Close a traversal cursor
  //! @param fts_handle cursor to close
  //! @return 0 if fts_handle was an open cursor, otherwise -1
  //--------------------------------------------------------------------------

  virtual int ftsClose (FileIo::FtsHandle* fts_handle);

private:

  int mFd; //< file descriptor to filesystem file
=======
  PrefetchMap::iterator FindBlock(uint64_t offset);
>>>>>>> 7c1f8b5965059ac55872b220632da2f60ae4ce9c:fst/io/XrdIo.hh

  //--------------------------------------------------------------------------
  //! Disable copy constructor
  //--------------------------------------------------------------------------
  FsIo (const FsIo&) = delete;

  //--------------------------------------------------------------------------
  //! Disable assign operator
  //--------------------------------------------------------------------------
<<<<<<< HEAD:fst/io/local/FsIo.hh
  FsIo& operator = (const FsIo&) = delete;


=======
  XrdIo& operator = (const XrdIo&) = delete;
>>>>>>> 7c1f8b5965059ac55872b220632da2f60ae4ce9c:fst/io/XrdIo.hh
};

EOSFSTNAMESPACE_END

<<<<<<< HEAD:fst/io/local/FsIo.hh
#endif  // __EOSFST_FSFILEIO_HH__


=======
#endif  // __EOSFST_XRDFILEIO_HH__
>>>>>>> 7c1f8b5965059ac55872b220632da2f60ae4ce9c:fst/io/XrdIo.hh
