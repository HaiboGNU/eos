/************************************************************************
 * EOS - the CERN Disk Storage System                                   *
 * Copyright (C) 2013 CERN/Switzerland                                  *
 *                                                                      *
 * This program is free software: you can redistribute it and/or modify *
 * it under the terms of the GNU General Public License as published by *
 * the Free Software Foundation, either version 3 of the License, or    *
 * (at your option) any later version.                                  *
 *                                                                      *
 * This program is distributed in the hope that it will be useful,      *
 * but WITHOUT ANY WARRANTY; without even the implied warranty of       *
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the        *
 * GNU General Public License for more details.                         *
 *                                                                      *
 * You should have received a copy of the GNU General Public License    *
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.*
 ************************************************************************/

//------------------------------------------------------------------------------
//! @file XrdUtils.hh
//! @author Geoffray Adde - CERN
//! @brief This file contains definitions of internal Globus GridFTP structures.
//!        It is only needed because Globus do not privide enougn information to
//!        callbacks in delayed passive mode, in particular it's impossible to
//!        tell whether we are reading or writing a file provided in data_info->pathname
//!        This was made following dmlite implementation by Andrey Kiryanov
//!        VERSION USED ARE:
//!            - globus_gridftp_server-7.25
//!            - globus_gridftp_server_control-3.6
//------------------------------------------------------------------------------

#include "globus_ftp_control.h"

/* From globus_i_gfs_acl.h */

struct globus_i_gfs_acl_handle_s;

typedef enum globus_l_gfs_acl_type_e
{
    GLOBUS_L_GFS_ACL_TYPE_INIT,
    GLOBUS_L_GFS_ACL_TYPE_AUTHORIZE
} globus_i_gfs_acl_type_t;

typedef void
(*globus_gfs_acl_cb_t)(
    globus_gfs_acl_object_desc_t *      object,
    globus_gfs_acl_action_t             action,
    void *                              user_arg,
    globus_result_t                     result);

typedef struct globus_i_gfs_acl_handle_s
{
    char *                              password;
    char *                              ipaddr;
    globus_i_gfs_acl_type_t             type;
    char *                              subject;
    char *                              username;
    char *                              hostname;
    globus_gfs_acl_cb_t                 cb;
    void *                              user_arg;
    globus_list_t *                     module_list;
    globus_list_t *                     current_list;
    globus_result_t                     cached_res;
    gss_ctx_id_t                        context;
    globus_gfs_acl_action_t             auth_action;
    globus_gfs_acl_object_desc_t        auth_object;
    globus_gfs_acl_info_t               acl_info;
} globus_i_gfs_acl_handle_t;

/* From globus_i_gfs_data.h */


typedef globus_gfs_finished_info_t      globus_gfs_data_reply_t;
typedef globus_gfs_event_info_t         globus_gfs_data_event_reply_t;

typedef void
(*globus_i_gfs_data_callback_t)(
    globus_gfs_data_reply_t *           reply,
    void *                              user_arg);

typedef void
(*globus_i_gfs_data_event_callback_t)(
    globus_gfs_data_event_reply_t *     reply,
    void *                              user_arg);

/* From globus_i_gfs_data.c */

typedef enum
{
    GLOBUS_L_GFS_DATA_REQUESTING = 1,
    GLOBUS_L_GFS_DATA_CONNECTING,
    GLOBUS_L_GFS_DATA_CONNECT_CB,
    GLOBUS_L_GFS_DATA_CONNECTED,
    GLOBUS_L_GFS_DATA_ABORTING,
    GLOBUS_L_GFS_DATA_ABORT_CLOSING,
    GLOBUS_L_GFS_DATA_FINISH,
    GLOBUS_L_GFS_DATA_FINISH_WITH_ERROR,
    GLOBUS_L_GFS_DATA_COMPLETING,
    GLOBUS_L_GFS_DATA_COMPLETE
} globus_l_gfs_data_state_t;

typedef enum
{
    GLOBUS_L_GFS_DATA_HANDLE_VALID = 1,
    GLOBUS_L_GFS_DATA_HANDLE_INUSE,
    GLOBUS_L_GFS_DATA_HANDLE_CLOSING,
    GLOBUS_L_GFS_DATA_HANDLE_TE_VALID,
    GLOBUS_L_GFS_DATA_HANDLE_TE_PRE_CLOSED,
    GLOBUS_L_GFS_DATA_HANDLE_TE_PRE_AND_DESTROYED,
    GLOBUS_L_GFS_DATA_HANDLE_CLOSING_AND_DESTROYED,
    GLOBUS_L_GFS_DATA_HANDLE_CLOSED_AND_DESTROYED,
    GLOBUS_L_GFS_DATA_HANDLE_CLOSED
} globus_l_gfs_data_handle_state_t;

typedef enum
{
    GLOBUS_L_GFS_DATA_INFO_TYPE_COMMAND = 1,
    GLOBUS_L_GFS_DATA_INFO_TYPE_PASSIVE,
    GLOBUS_L_GFS_DATA_INFO_TYPE_ACTIVE,
    GLOBUS_L_GFS_DATA_INFO_TYPE_STAT,
    GLOBUS_L_GFS_DATA_INFO_TYPE_SEND,
    GLOBUS_L_GFS_DATA_INFO_TYPE_RECV,
    GLOBUS_L_GFS_DATA_INFO_TYPE_LIST
} globus_l_gfs_data_info_type_t;

typedef struct globus_l_gfs_data_path_list_s
{
    char*                                   pathname;
    char*                                   subpath;
    globus_bool_t                           has_cycle;
    struct globus_l_gfs_data_path_list_s*   next;
} globus_l_gfs_data_path_list_t;


typedef struct
{
    globus_i_gfs_acl_handle_t           acl_handle;

    gss_cred_id_t                       del_cred;
    gss_ctx_id_t                        context;
    char *                              subject;
    char *                              client_ip;
    char *                              username;
    char *                              real_username;
    char *                              home_dir;
    char *                              true_home;
    char *                              chroot_path;
    uid_t                               uid;
    gid_t                               gid;
    int                                 gid_count;
    gid_t *                             gid_array;

    globus_gfs_session_info_t *         session_info_copy;
    globus_bool_t                       hybrid;

    void *                              session_arg;
    void *                              data_handle;
    globus_mutex_t                      mutex;
    int                                 ref;
    globus_gfs_storage_iface_t *        dsi;
    globus_extension_handle_t           dsi_handle;

    char *                              mod_dsi_name;
    globus_gfs_storage_iface_t *        mod_dsi;
    globus_extension_handle_t           mod_dsi_handle;

    globus_handle_table_t               handle_table;
    int                                 node_ndx;
    globus_list_t *                     net_stack_list;
    globus_list_t *                     disk_stack_list;
    char *                              client_appname;
    char *                              client_appver;
    char *                              client_scheme;
    gss_cred_id_t                       dcsc_cred;
    
    globus_bool_t                       upas;
    globus_ftp_control_handle_t         udt_data_channel;
    globus_bool_t                       udt_data_channel_inuse;

    globus_list_t **                    active_rp_list;
    globus_list_t *                     rp_list;
    
    globus_bool_t                       sharing;
    char *                              sharing_state_dir;
    char *                              sharing_id;
    char *                              sharing_sharee;

    char *                              taskid;

    char *                              s3id;
    char *                              s3key;
    gss_cred_id_t                       http_cred;
    char *                              http_ca_certs;
    globus_bool_t                       http_config_called;
    globus_xio_handle_t                 http_handle;
    globus_xio_stack_t                  http_stack;
    globus_xio_stack_t                  https_stack;
    globus_xio_driver_t                 http_driver;

    int                                 last_active;
    globus_off_t                        watch_updates;
    globus_bool_t                       watch;
    char *                              watch_op;
    globus_callback_handle_t            watch_handle;

    globus_hashtable_t                  custom_cmd_table;
} globus_l_gfs_data_session_t;

typedef struct
{
    globus_l_gfs_data_session_t *       session_handle;
    globus_l_gfs_data_handle_state_t    state;
    globus_gfs_data_info_t              info;
    globus_ftp_control_handle_t         data_channel;
    void *                              remote_data_arg;
    globus_bool_t                       is_mine;
    globus_gfs_operation_t              outstanding_op;
    globus_bool_t                       destroy_requested;
    globus_bool_t                       use_interface;
    globus_xio_handle_t                 http_handle;
    globus_xio_attr_t                   xio_attr;
    globus_off_t                        http_length;
    globus_off_t                        http_transferred;
    char *                              http_response_str;
    globus_callback_handle_t            perf_handle;

} globus_l_gfs_data_handle_t;

typedef struct globus_l_gfs_data_operation_s
{
    globus_l_gfs_data_state_t           state;
    globus_bool_t                       writing;
    globus_l_gfs_data_handle_t *        data_handle;
    void *                              data_arg;
    struct timeval                      start_timeval;
    char *                              remote_ip;

    globus_l_gfs_data_session_t *       session_handle;
    void *                              info_struct;
    globus_l_gfs_data_info_type_t       type;

    int                                 id;
    int                                 op_info_id;
    globus_gfs_ipc_handle_t             ipc_handle;

    uid_t                               uid;
    /* transfer stuff */
    globus_range_list_t                 range_list;
    globus_off_t                        partial_offset;
    globus_off_t                        partial_length;
    const char *                        list_type;
    int                                 list_depth;
    int                                 traversal_options;
    globus_result_t                     delayed_error;
    
    char *                              user_msg;
    int                                 user_code;

    globus_off_t                        bytes_transferred;
    globus_off_t                        max_offset;
    globus_off_t                        recvd_bytes;
    globus_range_list_t                 recvd_ranges;
    int                                 retr_markers;
    
    globus_l_gfs_data_path_list_t *     path_list;
    globus_l_gfs_data_path_list_t *     current_path;
    globus_l_gfs_data_path_list_t *     root_paths;

    int                                 nstreams;
    int                                 stripe_count;
    int *                               eof_count;
    globus_bool_t                       eof_ready;
    int                                 node_count;
    int                                 node_ndx;
    int                                 write_stripe;

    int                                 stripe_connections_pending;

    /* used to shift the offset from the dsi due to partial/restart */
    globus_off_t                        write_delta;
    /* used to shift the offset from the dsi due to partial/restart */
    globus_off_t                        transfer_delta;
    int                                 stripe_chunk;
    globus_range_list_t                 stripe_range_list;

    /* command stuff */
    globus_gfs_command_type_t           command;
    char *                              pathname;
    globus_off_t                        cksm_offset;
    globus_off_t                        cksm_length;
    char *                              cksm_alg;
    char *                              cksm_response;
    mode_t                              chmod_mode;
    char *                              chgrp_group;
    time_t                              utime_time;
    char *                              from_pathname;
    /**/

    char *                              http_response_str;

    int                                 update_interval;
    
    void *                              event_arg;
    int                                 event_mask;

    globus_i_gfs_data_callback_t        callback;
    globus_i_gfs_data_event_callback_t  event_callback;
    void *                              user_arg;

    int                                 ref;
    globus_result_t                     cached_res;

    globus_gfs_storage_iface_t *        dsi;
    int                                 sent_partial_eof;

    void *                              stat_wrapper;
    globus_bool_t                       final_stat;
    globus_bool_t                       begin_called;
    globus_off_t                        list_buffer_offset;
    globus_mutex_t                      stat_lock;

    void *                              hybrid_op;
    /* sort of a state cheat.  for case where:
        start_abort
            -- connecting to abort_closing
            -- waiting on abort_cb
        globus_gridftp_server_finished_transfer
            -- connecting to finished
        begin_cb
            -- since in finished we kickout atransfer end
        abort_cb
            -- kicks out transfer end since in finished
    */
    globus_bool_t                       finished_delayed;
    globus_bool_t                       connect_failed;
} globus_l_gfs_data_operation_t;

/* From globus_i_gridftp_server_control.h */


typedef enum
{
    GLOBUS_L_GSC_DATA_OBJ_READY = 1,
    GLOBUS_L_GSC_DATA_OBJ_DESTROY_WAIT,
    GLOBUS_L_GSC_DATA_OBJ_DESTROYING,
    GLOBUS_L_GSC_DATA_OBJ_INUSE
} globus_l_gsc_data_obj_state_t;

typedef void
(*globus_i_gsc_auth_cb_t)(
    struct globus_i_gsc_op_s *              op,
    globus_gridftp_server_control_response_t response_type,
    char *                                  response_msg,
    void *                                  user_arg);

typedef void
(*globus_i_gsc_resource_cb_t)(
    struct globus_i_gsc_op_s *              op,
    globus_gridftp_server_control_response_t response_type,
    char *                                  response_msg,
    char *                                  path,
    globus_gridftp_server_control_stat_t *  stat_info,
    int                                     stat_count,
    uid_t                                   uid,
    void *                                  user_arg);

typedef void
(*globus_i_gsc_passive_cb_t)(
    struct globus_i_gsc_op_s *              op,
    globus_gridftp_server_control_response_t response_type,
    char *                                  response_msg,
    const char **                           cs,
    int                                     addr_count,
    void *                                  user_arg);

typedef void
(*globus_i_gsc_port_cb_t)(
    struct globus_i_gsc_op_s *              op,
    globus_gridftp_server_control_response_t response_type,
    char *                                  response_msg,
    void *                                  user_arg);

typedef void
(*globus_i_gsc_transfer_cb_t)(
    struct globus_i_gsc_op_s *              op,
    globus_gridftp_server_control_response_t response_type,
    char *                                  response_msg,
    void *                                  user_arg);

typedef struct globus_i_gsc_data_s
{
    globus_l_gsc_data_obj_state_t           state;
    struct globus_i_gsc_server_handle_s *   server_handle;
    int                                     stripe_count;
    void *                                  user_handle;
    globus_gridftp_server_control_data_dir_t dir;
    globus_bool_t                           first_use;
} globus_i_gsc_data_t;

typedef enum globus_i_gsc_op_type_e
{
    GLOBUS_L_GSC_OP_TYPE_AUTH,
    GLOBUS_L_GSC_OP_TYPE_RESOURCE,
    GLOBUS_L_GSC_OP_TYPE_CREATE_PASV,
    GLOBUS_L_GSC_OP_TYPE_CREATE_PORT,
    GLOBUS_L_GSC_OP_TYPE_SEND,
    GLOBUS_L_GSC_OP_TYPE_RECV,
    GLOBUS_L_GSC_OP_TYPE_DESTROY,
    GLOBUS_L_GSC_OP_TYPE_LIST,
    GLOBUS_L_GSC_OP_TYPE_NLST,
    GLOBUS_L_GSC_OP_TYPE_MLSD,
    GLOBUS_L_GSC_OP_TYPE_MLSR
} globus_i_gsc_op_type_t;

typedef struct globus_i_gsc_event_data_s
{
    globus_l_gsc_data_obj_state_t           state;
    globus_callback_handle_t                periodic_handle;
    int                                     stripe_count;
    globus_bool_t                           perf_running;

    globus_callback_handle_t                restart_handle;
    globus_bool_t                           restart_running;

    int                                     event_mask;
    globus_gridftp_server_control_event_cb_t user_cb;
    void *                                  user_arg;

    globus_off_t *                          stripe_total;
} globus_i_gsc_event_data_t;

typedef struct globus_i_gsc_op_s
{
    globus_i_gsc_op_type_t                  type;

    int                                     ref;
    struct globus_i_gsc_server_handle_s *   server_handle;

    globus_gridftp_server_control_response_t response_type;
    char *                                  response_msg;

    globus_list_t *                         cmd_list;
    globus_bool_t                           done;

    /* stuff for auth */
    globus_bool_t                           authenticated;
    char *                                  username;
    char *                                  password;
    globus_i_gsc_auth_cb_t                  auth_cb;
    globus_i_gsc_resource_cb_t              stat_cb;
    globus_i_gsc_transfer_cb_t              list_cb;

    globus_gridftp_server_control_stat_t *  stat_info;
    int                                     stat_count;
    globus_mutex_t                          stat_lock;
    
    /* stuff for resource */
    int                                     uid;
    int                                     gid_count;
    int *                                   gid_array;
    char *                                  path;
    char *                                  glob_match_str;
    globus_gridftp_server_control_resource_mask_t mask;

    /* stuff for port/pasv */
    char **                                 cs;
    int                                     max_cs;
    int                                     net_prt;
    globus_i_gsc_passive_cb_t               passive_cb;
    globus_i_gsc_port_cb_t                  port_cb;
    globus_i_gsc_transfer_cb_t              transfer_cb;

    char *                                  command;

    /* stuff for transfer */
    char *                                  mod_name;
    char *                                  mod_parms;
    globus_gridftp_server_control_transfer_cb_t user_data_cb;
    globus_bool_t                           transfer_started;

    globus_range_list_t                     range_list;
    globus_range_list_t                     perf_range_list;
    globus_i_gsc_event_data_t               event;

    globus_bool_t                           aborted;
    void *                                  abort_user_arg;
    void *                                  user_arg;
    
    globus_i_gsc_data_t *                   data_destroy_obj;
} globus_i_gsc_op_t;

/* From globus_i_gridftp_server.h */

typedef void
(*globus_i_gfs_server_close_cb_t)(
    void *                              user_arg,
    globus_object_t *                   error);

/* From globus_i_gfs_control.c */

typedef struct
{
    globus_xio_handle_t                 xio_handle;
    char *                              remote_contact;
    char *                              local_contact;

    char *                              scks_alg;
    char *                              scks_val;
    char *                              rnfr_pathname;
    char *                              slfr_pathname;

    globus_i_gfs_server_close_cb_t      close_func;
    void *                              close_arg;

    void *                              session_arg;
    char *                              home_dir;
    char *                              username;
    globus_gridftp_server_control_t     server_handle;
    globus_object_t *                   close_error;
    
    globus_hashtable_t                  custom_cmd_table;
} globus_l_gfs_server_instance_t;

typedef struct
{
    globus_l_gfs_server_instance_t *    instance;
    globus_gridftp_server_control_op_t  control_op;
    void *                              event_arg;
    void *                              info;
    globus_bool_t                       transfer_events;

    globus_gfs_operation_type_t         bounce_type;
    globus_i_gfs_data_callback_t        bounce_cb;
    void *                              bounce_info; 
} globus_l_gfs_request_info_t;
