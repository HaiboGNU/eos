user              daemon;
worker_processes  1;
error_log         /var/log/nginx/error.log debug;
pid               /var/run/nginx.pid;

env OPENSSL_ALLOW_PROXY_CERTS;

events {
    worker_connections  1024;
}


http {
    default_type  application/octet-stream;

    log_format    main '$remote_addr - $remote_user [$time_local] "$request" '
                       '$status $body_bytes_sent "$http_referer" '
                       '"$http_user_agent" "$http_x_forwarded_for"';
    access_log         /var/log/nginx/access.log 
                       main;

    sendfile           on;
    keepalive_timeout  65;
    #tcp_nopush        on;
    #gzip              on;
    #keepalive_timeout 0;
    
    # Load config files from the /etc/nginx/conf.d directory
    # The default server is in conf.d/default.conf
    # include /etc/nginx/conf.d/*.conf;

    server {
        server_name  EOS_NGINX_HOSTNAME;
        listen       EOS_NGINX_PORT;

        ssl                    on;
        ssl_protocols          SSLv3 TLSv1 TLSv1.1 TLSv1.2;
        ssl_certificate        EOS_NGINX_SSL_CERTIFICATE;
        ssl_certificate_key    EOS_NGINX_SSL_KEY;
        ssl_client_certificate EOS_NGINX_SSL_CLIENT_CERTIFICATE;
        ssl_verify_client      optional;
        ssl_verify_depth       10;

        client_max_body_size   1000000m;

        location / {

            proxy_pass         http://localhost:8000/;
            #proxy_redirect    http://localhost:8001/  http://$host:8001;

            proxy_set_header   Host               $host;
            proxy_set_header   X-Real-IP          $remote_addr;
            proxy_set_header   X-Forwarded-For    $proxy_add_x_forwarded_for;
            proxy_set_header   SSL_CLIENT_S_DN    $ssl_client_s_dn;
            proxy_set_header   SSL_CLIENT_I_DN    $ssl_client_i_dn;
            proxy_set_header   SSL_CLIENT_VERIFY  $ssl_client_verify;

            client_body_buffer_size     128k;

            proxy_connect_timeout       90;
            proxy_send_timeout          90;
            proxy_read_timeout          90;

            proxy_buffer_size           4k;
            proxy_buffers               4 32k;
            proxy_busy_buffers_size     64k;
            proxy_temp_file_write_size  64k;

            # Kerberos
            auth_gss              on;
            auth_gss_keytab       EOS_NGINX_GSS_KEYTAB;
            auth_gss_realm        EOS_NGINX_GSS_REALM;
            auth_gss_service_name EOS_NGINX_GSS_SERVICE_NAME;

            proxy_set_header      Remote-User $remote_user;
        }

        # Proxy download 
        location ~* ^/internal_redirect/(.*?)/(.*) {

            # Do not allow people to mess with this location directly
            # Only internal redirects are allowed
            internal;

            # Location-specific logging
            access_log internal_redirect.access.log main;
            error_log  internal_redirect.error.log  debug;

            # Extract download url from the request
            set $download_uri  $2;
            set $download_host $1;

            # Compose download url
            set $download_url http://$download_host/$download_uri?$args;

            # Set download request headers
            proxy_set_header Host          $download_host;
            proxy_set_header Authorization '';

            # The next two lines could be used if your storage 
            # backend does not support Content-Disposition 
            # headers used to specify file name browsers use 
            # when save content to the disk
            # proxy_hide_header Content-Disposition;
            # add_header Content-Disposition 'attachment; filename="$args"';

            # Do not touch local disks when proxying 
            # content to clients
            proxy_max_temp_file_size 0;

            # Download the file and send it to client
            proxy_pass $download_url;
        }
    }
}
