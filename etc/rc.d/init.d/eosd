#!/bin/bash
# ----------------------------------------------------------------------
# File: eosd
# Author: Andreas-Joachim Peters - CERN
# ----------------------------------------------------------------------

# ************************************************************************
# * EOS - the CERN Disk Storage System                                   *
# * Copyright (C) 2011 CERN/Switzerland                                  *
# *                                                                      *
# * This program is free software: you can redistribute it and/or modify *
# * it under the terms of the GNU General Public License as published by *
# * the Free Software Foundation, either version 3 of the License, or    *
# * (at your option) any later version.                                  *
# *                                                                      *
# * This program is distributed in the hope that it will be useful,      *
# * but WITHOUT ANY WARRANTY; without even the implied warranty of       *
# * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the        *
# * GNU General Public License for more details.                         *
# *                                                                      *
# * You should have received a copy of the GNU General Public License    *
# * along with this program.  If not, see <http://www.gnu.org/licenses/>.*
# ************************************************************************
#
#       /etc/rc.d/init.d/eosd
#
# Starts eosd 
#
# chkconfig: 345 96 6
# description: Starts eosd 
# processname: eosd

# Source function library.

export EOS_ROOT=/usr

. /etc/init.d/functions

if test ! -x ${EOS_ROOT}/sbin/eosd ; then
  echo Error: ${EOS_ROOT}/sbin/eosd does not exist!
  exit 0
fi

[ -f /etc/sysconfig/eos ] && . /etc/sysconfig/eos

RETVAL=0
prog="eosd"

[ -z "${EOS_FUSE_MOUNTS}" ] && EOS_FUSE_MOUNTS="main";

FUSE_OPT_SAVE=${FUSE_OPT}

start() {
    if [ -n "$1" ]; then
        EOS_FUSE_MOUNTS="$1";
    fi  
    for i in ${EOS_FUSE_MOUNTS}; do
        (
        # in any case, we make sure that there is no leftover in the environment from the previous iteration
        unset EOS_FUSE_DEBUG EOS_FUSE_LOWLEVEL_DEBUGEOS_FUSE_NOACCESS EOS_FUSE_KERNELCACHE EOS_FUSE_DIRECTIO EOS_FUSE_CACHE EOS_FUSE_CACHE_SIZE EOS_FUSE_CACHE_WRITE EOS_FUSE_BIGWRITES EOS_FUSE_NEGSTATCACHE EOS_FUSE_NEGSTATCACHE_SIZE EOS_FUSE_NEGSTATCACHE_LIFETIMENS EOS_FUSE_EXEC EOS_FUSE_LOCK_ENVIRONMENT EOS_FUSE_NO_MT EOS_FUSE_USER_KRB5CC EOS_FUSE_USER_GSIPROXY EOS_FUSE_USER_KRB5FIRST EOS_FUSE_PIDMAP EOS_FUSE_RMLVL_PROTECT EOS_FUSE_RDAHEAD EOS_FUSE_RDAHEAD_WINDOW EOS_FUSE_LAZYOPENRO EOS_FUSE_LAZYOPENRW EOS_FUSE_LOG_PREFIX EOS_FUSE_LOCALTIMECONSISTENT EOS_FUSE_STREAMERRORWINDOW FUSE_OPT 
        # then we use the values from the main /etc/sysconfig/eos config file (if any) as default values
        [ -f /etc/sysconfig/eos ] && . /etc/sysconfig/eos
        if [ "$i" != "main" ]; then
            # then, we override the env vars with the ones in the instance specific config file /etc/sysconfig/eos.$i
            if [ -f /etc/sysconfig/eos.$i ]; then
                . /etc/sysconfig/eos.$i
            else
                echo -n "Skipping fuse mount for instance $i - no /etc/sysconfig/eos.$i configuration file"
                echo 
                echo_warning
                echo 
                continue;
            fi
        fi

        # Check if eosd is already running
        echo
        eosdpid=`pgrep -f "${EOS_ROOT}/sbin/eosd ${EOS_FUSE_MOUNTDIR-/eos/}"`
        export EOS_FUSE_DEBUG=${EOS_FUSE_DEBUG-0}
        export EOS_FUSE_LOWLEVEL_DEBUG=${EOS_FUSE_LOWLEVEL_DEBUG-0}
        export EOS_FUSE_NOACCESS=${EOS_FUSE_NOACCESS-1}
        export EOS_FUSE_KERNELCACHE=${EOS_FUSE_KERNELCACHE-1}
        export EOS_FUSE_DIRECTIO=${EOS_FUSE_DIRECTIO-0}
        export EOS_FUSE_CACHE=${EOS_FUSE_CACHE-1}
        export EOS_FUSE_CACHE_SIZE=${EOS_FUSE_CACHE_SIZE-300000000}
        export EOS_FUSE_CACHE_WRITE=${EOS_FUSE_CACHE_WRITE-1}
        export EOS_FUSE_NEGSTATCACHE=${EOS_FUSE_NEGSTATCACHE-1}
        export EOS_FUSE_NEGSTATCACHE_SIZE=${EOS_FUSE_NEGSTATCACHE_SIZE-100000}
        export EOS_FUSE_NEGSTATCACHE_LIFETIMENS=${EOS_FUSE_NEGSTATCACHE_LIFETIMENS-60000000000}
        export EOS_FUSE_BIGWRITES=${EOS_FUSE_BIGWRITES-0}    
        export EOS_FUSE_EXEC=${EOS_FUSE_EXEC-0}
        export EOS_FUSE_LOCK_ENVIRONMENT=${EOS_FUSE_LOCK_ENVIRONMENT-0}
        export EOS_FUSE_NO_MT=${EOS_FUSE_NO_MT-0}
        export EOS_FUSE_USER_KRB5CC=${EOS_FUSE_USER_KRB5CC-0}
        export EOS_FUSE_USER_GSIPROXY=${EOS_FUSE_USER_GSIPROXY-0}
        export EOS_FUSE_USER_KRB5FIRST=${EOS_FUSE_USER_KRB5FIRST-0}
        export EOS_FUSE_PIDMAP=${EOS_FUSE_PIDMAP-0}
        export EOS_FUSE_RMLVL_PROTECT=${EOS_FUSE_RMLVL_PROTECT-1}
        export EOS_FUSE_RDAHEAD=${EOS_FUSE_RDAHEAD-0}
        export EOS_FUSE_RDAHEAD_WINDOW=${EOS_FUSE_RDAHEAD_WINDOW-131072}
        export EOS_FUSE_LAZYOPENRO=${EOS_FUSE_LAZYOPENRO-0}
        export EOS_FUSE_LAZYOPENRW=${EOS_FUSE_LAZYOPENRW-0}
        export EOS_FUSE_LOG_PREFIX=${EOS_FUSE_LOG_PREFIX-$i}
        export EOS_FUSE_LOCALTIMECONSISTENT=${EOS_FUSE_LOCALTIMECONSISTENT-1}
         [[ "x$EOS_FUSE_STREAMERRORWINDOW" != "x" ]] && export XRD_STREAMERRORWINDOW=$EOS_FUSE_STREAMERRORWINDOW
        # make sure that FUSE_OPT keeps the same default value
        export FUSE_OPT=${FUSE_OPT-"${FUSE_OPT_SAVE}"}

        if [ "x$EOS_FUSE_BIGWRITES" = "x1" ]; then
            FUSE_OPT="big_writes,"${FUSE_OPT-""}
        else
            test -n "${FUSE_OPT}" && FUSE_OPT=${FUSE_OPT}","
        fi
        if [ "x$eosdpid" = "x" ]; then
            echo -n "Starting $prog for instance: $i"
            mkdir -p /var/run/eosd/
            cd /var/run/eosd/
            mkdir -p /var/run/eosd/credentials/store
            chmod 1777 /var/run/eosd/credentials
            chmod 1777 /var/run/eosd/credentials/store
            mkdir -p ${EOS_FUSE_MOUNTDIR-/eos/}
            chmod -R 733 ${EOS_FUSE_MOUNTDIR-/eos/}
            unset KRB5CCNAME
            unset X509_USER_CERT
            unset X509_USER_KEY
            ulimit -S -c ${DAEMON_COREFILE_LIMIT:-0}
            ulimit -n 65000
            test -c /dev/fuse || modprobe fuse
            ${EOS_ROOT}/sbin/eosd ${EOS_FUSE_MOUNTDIR-/eos/} -o${FUSE_OPT-""}max_readahead=131072,max_write=4194304,fsname=eos$i,allow_other,url=root://${EOS_FUSE_MGM_ALIAS-eosdev.cern.ch}/${EOS_FUSE_MOUNTDIR-/eos/}//  >& /dev/null 
            pid=`pgrep -f "${EOS_ROOT}/sbin/eosd ${EOS_FUSE_MOUNTDIR-/eos/}"`
            SRETVAL=$?
            if [ $SRETVAL -eq 0 ]; then
                touch /var/lock/subsys/$prog.$i
                echo $pid > /var/run/$prog.$i.pid
                echo_success;
            fi
            if [ $SRETVAL -gt 0 ]; then
                RETVAL=$SRETVAL;
            fi
            echo
            echo "EOS_FUSE_DEBUG                   : ${EOS_FUSE_DEBUG}"
            echo "EOS_FUSE_LOWLEVEL_DEBUG          : ${EOS_FUSE_DEBUG}"
            echo "EOS_FUSE_NOACCESS                : ${EOS_FUSE_NOACCESS}"
            echo "EOS_FUSE_KERNELCACHE             : ${EOS_FUSE_KERNELCACHE}"
            echo "EOS_FUSE_DIRECTIO                : ${EOS_FUSE_DIRECTIO}"
            echo "EOS_FUSE_CACHE                   : ${EOS_FUSE_CACHE}"
            echo "EOS_FUSE_CACHE_SIZE              : ${EOS_FUSE_CACHE_SIZE}"
            echo "EOS_FUSE_CACHE_WRITE             : ${EOS_FUSE_CACHE_WRITE}"
            echo "EOS_FUSE_NEGSTATCACHE            : ${EOS_FUSE_NEGSTATCACHE}"
            echo "EOS_FUSE_NEGSTATCACHE_SIZE       : ${EOS_FUSE_NEGSTATCACHE_SIZE}"
            echo "EOS_FUSE_NEGSTATCACHE_LIFETIMENS : ${EOS_FUSE_NEGSTATCACHE_LIFETIMENS}"
            echo "EOS_FUSE_BIGWRITES               : ${EOS_FUSE_BIGWRITES}"
            echo "EOS_FUSE_EXEC                    : ${EOS_FUSE_EXEC}"
            echo "EOS_FUSE_LOCK_ENVIRONMENT        : ${EOS_FUSE_LOCK_ENVIRONMENT}" 
            echo "EOS_FUSE_NO_MT                   : ${EOS_FUSE_NO_MT}"
            echo "EOS_FUSE_USER_KRB5CC             : ${EOS_FUSE_USER_KRB5CC}"
            echo "EOS_FUSE_USER_GSIPROXY           : ${EOS_FUSE_USER_GSIPROXY}"
            echo "EOS_FUSE_USER_KRB5FIRST          : ${EOS_FUSE_USER_KRB5FIRST}"
            echo "EOS_FUSE_PIDMAP                  : ${EOS_FUSE_PIDMAP}"
            echo "EOS_FUSE_RMLVL_PROTECT           : ${EOS_FUSE_RMLVL_PROTECT}"
            echo "EOS_FUSE_RDAHEAD                 : ${EOS_FUSE_RDAHEAD}"
            echo "EOS_FUSE_RDAHEAD_WINDOW          : ${EOS_FUSE_RDAHEAD_WINDOW}"
            echo "EOS_FUSE_LAZYOPENRO              : ${EOS_FUSE_LAZYOPENRO}"
            echo "EOS_FUSE_LAZYOPENRW              : ${EOS_FUSE_LAZYOPENRW}"
            echo "EOS_FUSE_LOG_PREFIX              : ${EOS_FUSE_LOG_PREFIX}"
            echo "EOS_FUSE_LOCALTIMECONSISTENT     : ${EOS_FUSE_LOCALTIMECONSISTENT}"
            [[ "x$XRD_STREAMERRORWINDOW" != "x" ]] && echo "XRD_STREAMERRORWINDOW        : ${XRD_STREAMERRORWINDOW}"
        else 
            echo eosd already running. Pid is $eosdpid 
            echo Stop it first with 'service eosd stop'
            echo and try again or use directly 'service eosd restart'.
            RETVAL=1
            echo_warning
        fi
        )
    done
}

stop() {
    if [ -n "$1" ]; then
        EOS_FUSE_MOUNTS="$1";
    fi  
    for i in ${EOS_FUSE_MOUNTS}; do
        if [ "$i" = "main" ]; then
            [ -f /etc/sysconfig/eos ] && . /etc/sysconfig/eos
        else 
            if [ -f /etc/sysconfig/eos.$i ]; then
                . /etc/sysconfig/eos.$i
            else
                echo -n "Skipping fuse mount for instance $i - no /etc/sysconfig/eos.$i configuration file"
                echo 
                echo_warning
                echo 
                continue;
            fi
        fi
        echo -n "Stopping $prog for instance: $i"
        umdir="${EOS_FUSE_MOUNTDIR-/eos/}";
        pgrep -f "${EOS_ROOT}/sbin/eosd $umdir"    >& /dev/null
        existed=$?
        umount -f -l $umdir >& /dev/null
        pkill -f "${EOS_ROOT}/sbin/eosd $umdir"    
        pgrep -f "${EOS_ROOT}/sbin/eosd $umdir"    >& /dev/null
        killed=$?
        while [ $killed -eq 0 ]; 
        do     
            pkill -9 -f "${EOS_ROOT}/sbin/eosd $umdir"
            usleep 100000
            pgrep -f "${EOS_ROOT}/sbin/eosd $umdir" >& /dev/null
            killed=$?
        done
        rm -f /var/lock/subsys/$prog.$i
        rm -f /var/run/$prog.$i.pid
        echo
        if [ $existed -eq 0 ]; then
            echo_success    
        else
            echo_failure
        fi    
        echo
        RETVAL=0;
    done
}

getstatus() {
    if [ -n "$1" ]; then
        EOS_FUSE_MOUNTS="$1";
    fi  
    # Loop over xrootd roles
    for i in ${EOS_FUSE_MOUNTS}; do
        pid=`pidofproc $prog.$i`
        type=""
        if [ -n "$pid" ]; then
            echo $"$prog for instance: $i (pid $pid) is running $type ..."
            continue
        else
            # See if /var/lock/subsys/$prog.$i exists
            if [ -f /var/lock/subsys/$prog.$i ]; then
                echo $"$prog for instance: $i dead but subsys locked"
                RETVAL=1
            else
                pid=`ps -eo pid,ppid,comm,cmd | grep -v egrep | egrep "$prog -n $i"| awk '{print $1}' | head -1`
                if [ -n "$pid" ]; then
                    echo $"$prog for instance: $i is starting (pid $pid) "
                    RETVAL=0
                else
                    echo $"$prog for instance: $i  is stopped"
                    RETVAL=2
                fi
            fi
        fi                       
    done
     
    return $RETVAL
}

restart() {
    stop $1
    start $1
}       

reload() {
    restart $1
}

case "$1" in
    start)
    start $2
    ;;
    stop)
    stop $2
    ;;
    reload|restart)
    restart $2
    ;;
    condrestart)
    
    if [ -f /var/lock/subsys/eosd ]; then
        restart 
    fi
    ;;
    status)
    
    getstatus $2
    RETVAL=$?
    ;;
    *)
    
    echo $"Usage: $0 {start|stop|restart|reload|condrestart|status}"
    RETVAL=1
esac

exit $RETVAL
